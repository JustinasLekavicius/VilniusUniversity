2021-12-26 12:49:40,520 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:40,520 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:40,536 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:40,536 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:40,536 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:40,536 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:40,536 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,536 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,536 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,551 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,551 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,551 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,567 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757847.98052916,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,567 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,567 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,567 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,582 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,582 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,593 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,614 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,724 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,740 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757236.484302877,6062373.5873539,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,755 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,755 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,771 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759682.4692080044,6061762.091127618,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,771 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,771 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759070.9729817226,6060539.098675055,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,771 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757236.484302877,6061762.091127618,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,786 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,786 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,794 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757847.98052916,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,794 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,794 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757847.98052916,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,802 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759682.4692080044,6062373.5873539,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,802 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,802 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,818 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,818 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757847.98052916,6062985.083580181,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,818 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759682.4692080044,6062985.083580181,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,818 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759682.4692080044,6061150.594901337,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,818 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,834 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,834 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,834 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,834 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,834 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757236.484302877,6060539.098675055,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,849 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757236.484302877,6062985.083580181,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,849 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,849 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757236.484302877,6061150.594901337,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,849 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,849 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,865 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:40,865 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757847.98052916,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,865 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,865 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2758459.476755442,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:40,865 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759682.4692080044,6060539.098675055,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,116 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,116 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,132 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,132 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,132 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,148 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,148 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,163 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,163 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,163 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,179 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,179 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,257 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,292 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,351 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,383 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,396 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,414 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,430 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,445 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,477 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,477 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,477 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,477 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,506 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,506 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,506 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,534 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,534 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,597 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,597 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,613 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,629 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,644 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,644 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,660 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,676 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,676 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,676 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,696 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,696 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,707 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,723 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,723 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,738 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,754 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,758 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,770 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:41,775 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:49:41,775 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:49:45,721 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,725 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,725 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,725 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,727 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,728 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,729 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,731 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,732 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,735 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,741 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,741 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,743 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,747 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,747 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,748 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,750 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,750 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,751 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,754 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,755 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,756 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,759 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,761 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,771 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,773 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,774 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,775 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,775 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,777 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,778 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,778 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,778 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,782 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,786 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,786 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,788 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,792 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,793 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,800 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,802 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,803 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,803 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,805 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,806 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,809 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,813 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,814 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,820 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,822 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,824 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,825 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,827 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,828 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,829 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,833 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,834 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,839 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,842 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,842 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,843 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,845 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,846 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,848 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,852 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,853 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,857 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,861 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,861 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,883 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,883 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:45,886 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,886 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:45,886 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:45,887 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:46,077 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:46,079 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:46,080 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:46,205 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:46,208 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:46,209 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:46,211 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:46,213 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:46,214 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:46,215 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:46,216 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:46,217 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:46,219 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:46,222 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:46,223 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:46,340 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:46,343 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:46,344 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:46,600 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:46,602 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:46,603 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:46,725 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:46,728 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:46,729 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:46,903 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:46,906 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:46,907 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:47,051 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:47,054 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:47,056 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:47,692 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:47,695 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:47,695 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:47,696 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:47,697 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:47,698 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:47,817 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:47,819 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:47,820 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:47,825 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:47,827 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:47,827 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:47,935 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:47,937 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:47,937 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:48,047 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:48,049 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:48,050 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:48,151 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:48,153 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:48,153 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:48,256 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:48,258 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:48,258 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:48,277 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:48,280 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:48,280 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:48,449 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:48,452 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:48,453 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,484 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,484 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,487 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,488 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,488 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,489 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,489 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,489 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,490 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,490 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,490 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,492 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,498 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,500 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,501 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,501 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,504 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,505 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,517 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,525 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,527 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,528 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,528 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,529 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,531 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,534 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,534 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,534 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,537 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,538 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,541 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,544 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,544 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,545 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,547 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,548 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,554 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,557 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,557 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,558 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,560 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,560 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,561 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,563 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,564 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,570 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,573 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,574 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,575 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,578 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,579 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,580 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,584 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,585 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,590 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,593 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,594 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,595 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,598 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,599 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,606 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,608 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,609 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,610 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,611 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,612 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,616 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,619 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,620 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,627 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,631 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,632 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,639 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,642 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,643 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,643 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,647 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,647 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,647 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,651 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,652 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,659 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,663 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,663 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,663 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,666 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,667 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,677 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,679 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,680 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,689 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,692 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,692 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,693 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,694 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,695 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,713 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,716 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,717 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,721 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,723 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,724 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,725 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,726 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,727 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,895 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,898 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,900 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,902 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,905 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,906 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,906 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,908 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,909 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,909 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,911 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,912 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:49,940 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:49,942 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:49,942 INFO [wfs.json] - about to encode JSON
2021-12-26 12:49:51,815 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:49:51,817 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:49:51,817 INFO [wfs.json] - about to encode JSON
2021-12-26 12:50:10,695 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:10,695 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Feature type task5:trees unknown
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:361)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:120)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:67)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1511)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:684)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:261)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:10,696 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:10,696 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:10,697 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Feature type task5:roadsmerged unknown
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:361)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:120)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:67)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1511)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:684)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:261)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:10,700 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:50:10,700 INFO [wfs.json] - about to encode JSON
2021-12-26 12:50:10,751 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:10,751 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Feature type task5:postboxes unknown
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:361)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:120)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:67)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1511)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:684)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:261)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:10,752 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:10,753 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Feature type task5:lakes unknown
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:361)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:120)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:67)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1511)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:684)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:261)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:10,759 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:10,761 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:50:10,762 INFO [wfs.json] - about to encode JSON
2021-12-26 12:50:10,870 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:10,870 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Feature type task5:trees unknown
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:361)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:120)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:67)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1511)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:684)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:261)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:10,870 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:10,871 ERROR [geoserver.ows] - 
org.geoserver.wfs.WFSException: Feature type task5:trees unknown
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.checkTypeName(BaseFeatureKvpRequestReader.java:361)
	at org.geoserver.wfs.kvp.BaseFeatureKvpRequestReader.read(BaseFeatureKvpRequestReader.java:120)
	at org.geoserver.wfs.kvp.GetFeatureKvpRequestReader.read(GetFeatureKvpRequestReader.java:67)
	at org.geoserver.ows.Dispatcher.parseRequestKVP(Dispatcher.java:1511)
	at org.geoserver.ows.Dispatcher.dispatch(Dispatcher.java:684)
	at org.geoserver.ows.Dispatcher.handleRequestInternal(Dispatcher.java:261)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerBasicAuthenticationFilter.doFilter(GeoServerBasicAuthenticationFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:10,883 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:10,889 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:10,889 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:10,901 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:10,908 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:10,908 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:10,986 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:10,994 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:10,999 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757847.98052916,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,001 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,006 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,015 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,023 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,047 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,138 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,145 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757847.98052916,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,160 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,167 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757847.98052916,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,188 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,190 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,195 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759682.4692080044,6061762.091127618,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,196 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2758459.476755442,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,208 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,208 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,209 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,213 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,213 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757236.484302877,6061762.091127618,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,214 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759682.4692080044,6061150.594901337,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,227 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,227 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,228 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,232 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759682.4692080044,6062373.5873539,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,232 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759070.9729817226,6060539.098675055,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,234 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,245 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,245 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,247 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,250 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757847.98052916,6062985.083580181,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,251 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757847.98052916,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,252 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757236.484302877,6061150.594901337,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,264 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,264 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,265 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,269 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759682.4692080044,6060539.098675055,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,269 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757236.484302877,6062373.5873539,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,271 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759682.4692080044,6062985.083580181,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,562 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,562 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:11,562 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:50:11,564 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:50:11,565 INFO [wfs.json] - about to encode JSON
2021-12-26 12:50:11,569 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757236.484302877,6060539.098675055,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,569 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757236.484302877,6062985.083580181,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:50:11,610 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:50:11,612 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:50:11,613 INFO [wfs.json] - about to encode JSON
2021-12-26 12:50:26,269 ERROR [gwc.layer] - Error saving tile layer 'task5:lakes'
java.lang.IllegalArgumentException: TileLayer with same name already exists: task5:lakes: <LayerInfoImpl--49328e9b:17df311e03f:-7fde>
	at org.geoserver.gwc.layer.DefaultTileLayerCatalog.save(DefaultTileLayerCatalog.java:374)
	at org.geoserver.gwc.layer.CatalogConfiguration.save(CatalogConfiguration.java:605)
	at org.geoserver.gwc.layer.CatalogConfiguration.addLayer(CatalogConfiguration.java:471)
	at org.geowebcache.layer.TileLayerDispatcher.addLayer(TileLayerDispatcher.java:189)
	at org.geoserver.gwc.GWC.add(GWC.java:1415)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.createTileLayer(CatalogLayerEventListener.java:171)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.handleAddEvent(CatalogLayerEventListener.java:152)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1873)
	at org.geoserver.catalog.impl.CatalogImpl.fireAdded(CatalogImpl.java:1826)
	at org.geoserver.catalog.impl.CatalogImpl.added(CatalogImpl.java:1804)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:743)
	at org.geoserver.security.SecureCatalogImpl.add(SecureCatalogImpl.java:1250)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.add(AbstractFilteredCatalog.java:566)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.add(AbstractCatalogDecorator.java:409)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.add(LocalWorkspaceCatalog.java:310)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:230)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:320)
	at org.geoserver.web.publish.PublishedConfigurationPage$6.onSubmitInternal(PublishedConfigurationPage.java:293)
	at org.geoserver.web.GeoserverAjaxSubmitLink.onSubmit(GeoserverAjaxSubmitLink.java:38)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:218)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:174)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at jdk.internal.reflect.GeneratedMethodAccessor433.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:26,274 INFO [geoserver.gwc] - Saving GeoSeverTileLayer task5:lakes
2021-12-26 12:50:26,274 ERROR [geoserver.web] - Error saving layer
java.util.NoSuchElementException: No GeoServerTileLayer named 'task5:lakes' exists
	at org.geoserver.gwc.layer.CatalogConfiguration.modifyLayer(CatalogConfiguration.java:495)
	at org.geowebcache.layer.TileLayerDispatcher.modify(TileLayerDispatcher.java:216)
	at org.geoserver.gwc.GWC.save(GWC.java:1712)
	at org.geoserver.gwc.web.layer.GeoServerTileLayerEditor.save(GeoServerTileLayerEditor.java:445)
	at org.geoserver.gwc.web.layer.LayerCacheOptionsTabPanel.save(LayerCacheOptionsTabPanel.java:49)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:336)
	at org.geoserver.web.publish.PublishedConfigurationPage$6.onSubmitInternal(PublishedConfigurationPage.java:293)
	at org.geoserver.web.GeoserverAjaxSubmitLink.onSubmit(GeoserverAjaxSubmitLink.java:38)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:218)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:174)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at jdk.internal.reflect.GeneratedMethodAccessor433.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:27,863 ERROR [gwc.layer] - Error saving tile layer 'task5:lakes'
java.lang.IllegalArgumentException: TileLayer with same name already exists: task5:lakes: <LayerInfoImpl--49328e9b:17df311e03f:-7fde>
	at org.geoserver.gwc.layer.DefaultTileLayerCatalog.save(DefaultTileLayerCatalog.java:374)
	at org.geoserver.gwc.layer.CatalogConfiguration.save(CatalogConfiguration.java:605)
	at org.geoserver.gwc.layer.CatalogConfiguration.addLayer(CatalogConfiguration.java:471)
	at org.geowebcache.layer.TileLayerDispatcher.addLayer(TileLayerDispatcher.java:189)
	at org.geoserver.gwc.GWC.add(GWC.java:1415)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.createTileLayer(CatalogLayerEventListener.java:171)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.handleAddEvent(CatalogLayerEventListener.java:152)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1873)
	at org.geoserver.catalog.impl.CatalogImpl.fireAdded(CatalogImpl.java:1826)
	at org.geoserver.catalog.impl.CatalogImpl.added(CatalogImpl.java:1804)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:743)
	at org.geoserver.security.SecureCatalogImpl.add(SecureCatalogImpl.java:1250)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.add(AbstractFilteredCatalog.java:566)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.add(AbstractCatalogDecorator.java:409)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.add(LocalWorkspaceCatalog.java:310)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:230)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:320)
	at org.geoserver.web.publish.PublishedConfigurationPage$5.onSubmit(PublishedConfigurationPage.java:283)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:687)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:27,867 INFO [geoserver.gwc] - Saving GeoSeverTileLayer task5:lakes
2021-12-26 12:50:27,867 ERROR [geoserver.web] - Error saving layer
java.util.NoSuchElementException: No GeoServerTileLayer named 'task5:lakes' exists
	at org.geoserver.gwc.layer.CatalogConfiguration.modifyLayer(CatalogConfiguration.java:495)
	at org.geowebcache.layer.TileLayerDispatcher.modify(TileLayerDispatcher.java:216)
	at org.geoserver.gwc.GWC.save(GWC.java:1712)
	at org.geoserver.gwc.web.layer.GeoServerTileLayerEditor.save(GeoServerTileLayerEditor.java:445)
	at org.geoserver.gwc.web.layer.LayerCacheOptionsTabPanel.save(LayerCacheOptionsTabPanel.java:49)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:336)
	at org.geoserver.web.publish.PublishedConfigurationPage$5.onSubmit(PublishedConfigurationPage.java:283)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:687)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:40,610 ERROR [gwc.layer] - Error saving tile layer 'task5:postboxes'
java.lang.IllegalArgumentException: TileLayer with same name already exists: task5:postboxes: <LayerInfoImpl--49328e9b:17df311e03f:-7fdc>
	at org.geoserver.gwc.layer.DefaultTileLayerCatalog.save(DefaultTileLayerCatalog.java:374)
	at org.geoserver.gwc.layer.CatalogConfiguration.save(CatalogConfiguration.java:605)
	at org.geoserver.gwc.layer.CatalogConfiguration.addLayer(CatalogConfiguration.java:471)
	at org.geowebcache.layer.TileLayerDispatcher.addLayer(TileLayerDispatcher.java:189)
	at org.geoserver.gwc.GWC.add(GWC.java:1415)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.createTileLayer(CatalogLayerEventListener.java:171)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.handleAddEvent(CatalogLayerEventListener.java:152)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1873)
	at org.geoserver.catalog.impl.CatalogImpl.fireAdded(CatalogImpl.java:1826)
	at org.geoserver.catalog.impl.CatalogImpl.added(CatalogImpl.java:1804)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:743)
	at org.geoserver.security.SecureCatalogImpl.add(SecureCatalogImpl.java:1250)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.add(AbstractFilteredCatalog.java:566)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.add(AbstractCatalogDecorator.java:409)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.add(LocalWorkspaceCatalog.java:310)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:230)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:320)
	at org.geoserver.web.publish.PublishedConfigurationPage$6.onSubmitInternal(PublishedConfigurationPage.java:293)
	at org.geoserver.web.GeoserverAjaxSubmitLink.onSubmit(GeoserverAjaxSubmitLink.java:38)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:218)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:174)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at jdk.internal.reflect.GeneratedMethodAccessor433.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:40,610 INFO [geoserver.gwc] - Saving GeoSeverTileLayer task5:postboxes
2021-12-26 12:50:40,610 ERROR [geoserver.web] - Error saving layer
java.util.NoSuchElementException: No GeoServerTileLayer named 'task5:postboxes' exists
	at org.geoserver.gwc.layer.CatalogConfiguration.modifyLayer(CatalogConfiguration.java:495)
	at org.geowebcache.layer.TileLayerDispatcher.modify(TileLayerDispatcher.java:216)
	at org.geoserver.gwc.GWC.save(GWC.java:1712)
	at org.geoserver.gwc.web.layer.GeoServerTileLayerEditor.save(GeoServerTileLayerEditor.java:445)
	at org.geoserver.gwc.web.layer.LayerCacheOptionsTabPanel.save(LayerCacheOptionsTabPanel.java:49)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:336)
	at org.geoserver.web.publish.PublishedConfigurationPage$6.onSubmitInternal(PublishedConfigurationPage.java:293)
	at org.geoserver.web.GeoserverAjaxSubmitLink.onSubmit(GeoserverAjaxSubmitLink.java:38)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:218)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:174)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at jdk.internal.reflect.GeneratedMethodAccessor433.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:41,182 ERROR [gwc.layer] - Error saving tile layer 'task5:postboxes'
java.lang.IllegalArgumentException: TileLayer with same name already exists: task5:postboxes: <LayerInfoImpl--49328e9b:17df311e03f:-7fdc>
	at org.geoserver.gwc.layer.DefaultTileLayerCatalog.save(DefaultTileLayerCatalog.java:374)
	at org.geoserver.gwc.layer.CatalogConfiguration.save(CatalogConfiguration.java:605)
	at org.geoserver.gwc.layer.CatalogConfiguration.addLayer(CatalogConfiguration.java:471)
	at org.geowebcache.layer.TileLayerDispatcher.addLayer(TileLayerDispatcher.java:189)
	at org.geoserver.gwc.GWC.add(GWC.java:1415)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.createTileLayer(CatalogLayerEventListener.java:171)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.handleAddEvent(CatalogLayerEventListener.java:152)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1873)
	at org.geoserver.catalog.impl.CatalogImpl.fireAdded(CatalogImpl.java:1826)
	at org.geoserver.catalog.impl.CatalogImpl.added(CatalogImpl.java:1804)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:743)
	at org.geoserver.security.SecureCatalogImpl.add(SecureCatalogImpl.java:1250)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.add(AbstractFilteredCatalog.java:566)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.add(AbstractCatalogDecorator.java:409)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.add(LocalWorkspaceCatalog.java:310)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:230)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:320)
	at org.geoserver.web.publish.PublishedConfigurationPage$5.onSubmit(PublishedConfigurationPage.java:283)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:687)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:41,186 INFO [geoserver.gwc] - Saving GeoSeverTileLayer task5:postboxes
2021-12-26 12:50:41,187 ERROR [geoserver.web] - Error saving layer
java.util.NoSuchElementException: No GeoServerTileLayer named 'task5:postboxes' exists
	at org.geoserver.gwc.layer.CatalogConfiguration.modifyLayer(CatalogConfiguration.java:495)
	at org.geowebcache.layer.TileLayerDispatcher.modify(TileLayerDispatcher.java:216)
	at org.geoserver.gwc.GWC.save(GWC.java:1712)
	at org.geoserver.gwc.web.layer.GeoServerTileLayerEditor.save(GeoServerTileLayerEditor.java:445)
	at org.geoserver.gwc.web.layer.LayerCacheOptionsTabPanel.save(LayerCacheOptionsTabPanel.java:49)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:336)
	at org.geoserver.web.publish.PublishedConfigurationPage$5.onSubmit(PublishedConfigurationPage.java:283)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:687)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:54,536 ERROR [gwc.layer] - Error saving tile layer 'task5:roadsmerged'
java.lang.IllegalArgumentException: TileLayer with same name already exists: task5:roadsmerged: <LayerInfoImpl--49328e9b:17df311e03f:-7fe2>
	at org.geoserver.gwc.layer.DefaultTileLayerCatalog.save(DefaultTileLayerCatalog.java:374)
	at org.geoserver.gwc.layer.CatalogConfiguration.save(CatalogConfiguration.java:605)
	at org.geoserver.gwc.layer.CatalogConfiguration.addLayer(CatalogConfiguration.java:471)
	at org.geowebcache.layer.TileLayerDispatcher.addLayer(TileLayerDispatcher.java:189)
	at org.geoserver.gwc.GWC.add(GWC.java:1415)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.createTileLayer(CatalogLayerEventListener.java:171)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.handleAddEvent(CatalogLayerEventListener.java:152)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1873)
	at org.geoserver.catalog.impl.CatalogImpl.fireAdded(CatalogImpl.java:1826)
	at org.geoserver.catalog.impl.CatalogImpl.added(CatalogImpl.java:1804)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:743)
	at org.geoserver.security.SecureCatalogImpl.add(SecureCatalogImpl.java:1250)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.add(AbstractFilteredCatalog.java:566)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.add(AbstractCatalogDecorator.java:409)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.add(LocalWorkspaceCatalog.java:310)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:230)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:320)
	at org.geoserver.web.publish.PublishedConfigurationPage$6.onSubmitInternal(PublishedConfigurationPage.java:293)
	at org.geoserver.web.GeoserverAjaxSubmitLink.onSubmit(GeoserverAjaxSubmitLink.java:38)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:218)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:174)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at jdk.internal.reflect.GeneratedMethodAccessor433.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:54,540 INFO [geoserver.gwc] - Saving GeoSeverTileLayer task5:roadsmerged
2021-12-26 12:50:54,540 ERROR [geoserver.web] - Error saving layer
java.util.NoSuchElementException: No GeoServerTileLayer named 'task5:roadsmerged' exists
	at org.geoserver.gwc.layer.CatalogConfiguration.modifyLayer(CatalogConfiguration.java:495)
	at org.geowebcache.layer.TileLayerDispatcher.modify(TileLayerDispatcher.java:216)
	at org.geoserver.gwc.GWC.save(GWC.java:1712)
	at org.geoserver.gwc.web.layer.GeoServerTileLayerEditor.save(GeoServerTileLayerEditor.java:445)
	at org.geoserver.gwc.web.layer.LayerCacheOptionsTabPanel.save(LayerCacheOptionsTabPanel.java:49)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:336)
	at org.geoserver.web.publish.PublishedConfigurationPage$6.onSubmitInternal(PublishedConfigurationPage.java:293)
	at org.geoserver.web.GeoserverAjaxSubmitLink.onSubmit(GeoserverAjaxSubmitLink.java:38)
	at org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1.onSubmit(AjaxSubmitLink.java:111)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter.onSubmit(AjaxFormSubmitBehavior.java:218)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:174)
	at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:155)
	at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:601)
	at jdk.internal.reflect.GeneratedMethodAccessor433.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:248)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:55,066 ERROR [gwc.layer] - Error saving tile layer 'task5:roadsmerged'
java.lang.IllegalArgumentException: TileLayer with same name already exists: task5:roadsmerged: <LayerInfoImpl--49328e9b:17df311e03f:-7fe2>
	at org.geoserver.gwc.layer.DefaultTileLayerCatalog.save(DefaultTileLayerCatalog.java:374)
	at org.geoserver.gwc.layer.CatalogConfiguration.save(CatalogConfiguration.java:605)
	at org.geoserver.gwc.layer.CatalogConfiguration.addLayer(CatalogConfiguration.java:471)
	at org.geowebcache.layer.TileLayerDispatcher.addLayer(TileLayerDispatcher.java:189)
	at org.geoserver.gwc.GWC.add(GWC.java:1415)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.createTileLayer(CatalogLayerEventListener.java:171)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.handleAddEvent(CatalogLayerEventListener.java:152)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1873)
	at org.geoserver.catalog.impl.CatalogImpl.fireAdded(CatalogImpl.java:1826)
	at org.geoserver.catalog.impl.CatalogImpl.added(CatalogImpl.java:1804)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:743)
	at org.geoserver.security.SecureCatalogImpl.add(SecureCatalogImpl.java:1250)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.add(AbstractFilteredCatalog.java:566)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.add(AbstractCatalogDecorator.java:409)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.add(LocalWorkspaceCatalog.java:310)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:230)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:320)
	at org.geoserver.web.publish.PublishedConfigurationPage$5.onSubmit(PublishedConfigurationPage.java:283)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:687)
	at jdk.internal.reflect.GeneratedMethodAccessor505.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:50:55,070 INFO [geoserver.gwc] - Saving GeoSeverTileLayer task5:roadsmerged
2021-12-26 12:50:55,070 ERROR [geoserver.web] - Error saving layer
java.util.NoSuchElementException: No GeoServerTileLayer named 'task5:roadsmerged' exists
	at org.geoserver.gwc.layer.CatalogConfiguration.modifyLayer(CatalogConfiguration.java:495)
	at org.geowebcache.layer.TileLayerDispatcher.modify(TileLayerDispatcher.java:216)
	at org.geoserver.gwc.GWC.save(GWC.java:1712)
	at org.geoserver.gwc.web.layer.GeoServerTileLayerEditor.save(GeoServerTileLayerEditor.java:445)
	at org.geoserver.gwc.web.layer.LayerCacheOptionsTabPanel.save(LayerCacheOptionsTabPanel.java:49)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:336)
	at org.geoserver.web.publish.PublishedConfigurationPage$5.onSubmit(PublishedConfigurationPage.java:283)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:687)
	at jdk.internal.reflect.GeneratedMethodAccessor505.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:51:06,824 INFO [geoserver.gwc] - Saving GeoSeverTileLayer task5:trees
2021-12-26 12:51:07,506 WARN [catalog.impl] - Catalog listener threw exception handling event.
java.lang.IllegalArgumentException: A GeoServerTileLayer named 'task5:trees' already exists
	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:142)
	at org.geoserver.gwc.layer.CatalogConfiguration.addLayer(CatalogConfiguration.java:458)
	at org.geowebcache.layer.TileLayerDispatcher.addLayer(TileLayerDispatcher.java:189)
	at org.geoserver.gwc.GWC.add(GWC.java:1415)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.createTileLayer(CatalogLayerEventListener.java:171)
	at org.geoserver.gwc.layer.CatalogLayerEventListener.handleAddEvent(CatalogLayerEventListener.java:152)
	at org.geoserver.catalog.impl.CatalogImpl.event(CatalogImpl.java:1873)
	at org.geoserver.catalog.impl.CatalogImpl.fireAdded(CatalogImpl.java:1826)
	at org.geoserver.catalog.impl.CatalogImpl.added(CatalogImpl.java:1804)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:743)
	at org.geoserver.security.SecureCatalogImpl.add(SecureCatalogImpl.java:1250)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.add(AbstractFilteredCatalog.java:566)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.add(AbstractCatalogDecorator.java:409)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.add(LocalWorkspaceCatalog.java:310)
	at org.geoserver.web.data.resource.ResourceConfigurationPage.doSaveInternal(ResourceConfigurationPage.java:230)
	at org.geoserver.web.publish.PublishedConfigurationPage.doSave(PublishedConfigurationPage.java:320)
	at org.geoserver.web.publish.PublishedConfigurationPage$5.onSubmit(PublishedConfigurationPage.java:283)
	at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1312)
	at org.apache.wicket.markup.html.form.Form.process(Form.java:976)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:797)
	at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:687)
	at jdk.internal.reflect.GeneratedMethodAccessor505.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.wicket.RequestListenerInterface.internalInvoke(RequestListenerInterface.java:258)
	at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:216)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.invokeListener(ListenerInterfaceRequestHandler.java:241)
	at org.apache.wicket.core.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:234)
	at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:895)
	at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64)
	at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:265)
	at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222)
	at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293)
	at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:261)
	at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:203)
	at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:159)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.springframework.web.servlet.mvc.ServletWrappingController.handleRequestInternal(ServletWrappingController.java:166)
	at org.springframework.web.servlet.mvc.AbstractController.handleRequest(AbstractController.java:177)
	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder$NotAsync.service(ServletHolder.java:1452)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:791)
	at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1626)
	at org.geoserver.filters.ThreadLocalsCleanupFilter.doFilter(ThreadLocalsCleanupFilter.java:28)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:73)
	at org.geoserver.ows.HTTPHeadersCollector.doFilter(HTTPHeadersCollector.java:48)
	at org.geoserver.filters.SpringDelegatingFilter$Chain.doFilter(SpringDelegatingFilter.java:70)
	at org.geoserver.filters.SpringDelegatingFilter.doFilter(SpringDelegatingFilter.java:43)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.platform.AdvancedDispatchFilter.doFilter(AdvancedDispatchFilter.java:39)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerAnonymousAuthenticationFilter.doFilter(GeoServerAnonymousAuthenticationFilter.java:53)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.geoserver.security.filter.GeoServerUserNamePasswordAuthenticationFilter.doFilter(GeoServerUserNamePasswordAuthenticationFilter.java:122)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:158)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:71)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.geoserver.security.filter.GeoServerSecurityContextPersistenceFilter$1.doFilter(GeoServerSecurityContextPersistenceFilter.java:52)
	at org.geoserver.security.filter.GeoServerCompositeFilter$NestedFilterChain.doFilter(GeoServerCompositeFilter.java:75)
	at org.geoserver.security.filter.GeoServerCompositeFilter.doFilter(GeoServerCompositeFilter.java:92)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.geoserver.security.GeoServerSecurityFilterChainProxy.doFilter(GeoServerSecurityFilterChainProxy.java:142)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.LoggingFilter.doFilter(LoggingFilter.java:102)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.XFrameOptionsFilter.doFilter(XFrameOptionsFilter.java:77)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.GZIPFilter.doFilter(GZIPFilter.java:48)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.SessionDebugFilter.doFilter(SessionDebugFilter.java:49)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.geoserver.filters.FlushSafeFilter.doFilter(FlushSafeFilter.java:42)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:201)
	at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1601)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:548)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:602)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:235)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1624)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1435)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:501)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1594)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1350)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:191)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:146)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
	at org.eclipse.jetty.server.Server.handle(Server.java:516)
	at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:388)
	at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:633)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:380)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:273)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
	at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:375)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:773)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:905)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-12-26 12:51:07,511 INFO [geoserver.gwc] - Saving GeoSeverTileLayer task5:trees
2021-12-26 12:51:08,938 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:08,941 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:08,943 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:08,943 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:08,943 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:08,944 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:08,970 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:08,971 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:08,972 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:08,972 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:08,977 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:08,979 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,061 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,093 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,128 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,152 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,157 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,193 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,193 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,217 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,223 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,229 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,246 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,252 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,257 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,265 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,281 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,306 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,316 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,344 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,347 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,353 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,355 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,363 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,374 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,387 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,389 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,391 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,400 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,423 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,425 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,436 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,448 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,464 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,465 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,476 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,510 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,519 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,539 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,568 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,673 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:09,676 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:51:09,676 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:09,677 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:09,678 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:09,679 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:09,679 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}roadsmerged
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getRoads_2Json}
2021-12-26 12:51:09,680 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:09,682 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 12:51:09,682 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}postboxes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getPostboxes_4Json}
2021-12-26 12:51:09,682 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:09,682 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:09,684 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:09,684 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:09,687 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:51:09,687 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:09,687 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:09,688 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:09,791 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,793 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,794 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,795 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,796 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,802 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,804 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757847.98052916,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,820 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,823 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,824 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,827 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,829 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,836 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,852 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,978 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:09,989 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:09,993 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,001 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757236.484302877,6061150.594901337,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,005 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,007 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,007 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,013 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,015 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757847.98052916,6062985.083580181,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,016 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,016 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757847.98052916,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,024 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759682.4692080044,6061150.594901337,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,028 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,030 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,034 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,037 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757236.484302877,6061762.091127618,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,038 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759070.9729817226,6060539.098675055,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,043 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759682.4692080044,6061762.091127618,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,057 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,058 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,065 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757847.98052916,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,065 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757236.484302877,6062985.083580181,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,068 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,073 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,082 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2758459.476755442,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,088 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757236.484302877,6062373.5873539,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,089 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,089 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,096 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757236.484302877,6060539.098675055,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,096 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,099 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759682.4692080044,6062373.5873539,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,105 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759682.4692080044,6062985.083580181,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,111 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,112 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,119 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757847.98052916,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,121 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759682.4692080044,6060539.098675055,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,135 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:10,138 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:51:10,139 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:10,142 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:10,143 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:10,145 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:10,146 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:51:10,146 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:51:10,146 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:10,147 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:10,147 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:51:10,148 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:10,275 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,275 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,277 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,277 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,279 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,280 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,298 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,299 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,299 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,303 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,303 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,309 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,378 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,386 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,413 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,420 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,436 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,462 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,494 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,515 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,516 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,522 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,536 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,553 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,560 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,576 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,579 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,581 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,591 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,598 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,601 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,603 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,610 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,612 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,619 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,635 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,635 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,635 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,671 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,676 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,700 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,706 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,732 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,733 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,735 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,739 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,755 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,761 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:10,768 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:10,793 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:11,795 INFO [platform.resource] - Notifying ENTRY_MODIFY change on C:\ProgramData\GeoServer\gwc-layers. Created: 1, removed: 0, modified: 0
2021-12-26 12:51:13,364 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:13,365 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:13,365 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:14,914 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:14,916 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:14,916 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:15,963 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:15,965 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:15,965 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:17,274 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:17,277 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:17,277 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:18,084 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:18,085 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:18,086 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:18,610 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:18,612 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:18,612 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:19,525 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:19,528 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:19,528 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:20,032 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:20,034 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:20,034 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:20,669 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:20,671 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:20,671 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:21,826 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:21,828 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:21,829 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:23,679 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,679 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,679 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,679 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,679 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,679 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,687 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062679.335467041,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:23,688 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6060844.846788196,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:23,688 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758765.224868583,6060844.846788196,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:23,688 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6060844.846788196,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:23,688 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062679.335467041,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:23,688 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758765.224868583,6062679.335467041,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:23,700 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,701 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,701 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,701 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:23,701 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759376.7210948644,6060844.846788196,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:23,701 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759376.7210948644,6062679.335467041,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:23,701 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758153.7286423002,6060844.846788196,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:23,701 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758153.7286423002,6062679.335467041,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:24,536 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:24,538 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:24,539 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:25,368 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:25,370 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:25,370 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:57,245 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}roadsmerged
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getRoads_2Json}
2021-12-26 12:51:57,245 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:57,245 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}postboxes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getPostboxes_4Json}
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:57,245 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:57,245 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:57,245 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:51:57,245 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:57,330 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,330 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,330 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,330 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,330 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,330 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,345 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,345 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,361 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,345 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,361 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,361 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,471 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,502 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,534 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,549 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,549 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,549 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,581 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,581 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,581 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6060844.846788196,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,596 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,596 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,609 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062679.335467041,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,612 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,612 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,628 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,628 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,628 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,628 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,628 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,628 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,628 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,644 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,644 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,659 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,659 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,659 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758153.7286423002,6060844.846788196,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,675 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,675 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,675 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,710 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,710 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,722 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,738 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,753 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,753 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,769 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758765.224868583,6062679.335467041,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,785 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,785 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,785 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,785 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759376.7210948644,6062679.335467041,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,800 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6060844.846788196,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,810 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,810 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,816 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759376.7210948644,6060844.846788196,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,816 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,832 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,848 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,848 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,863 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,879 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,879 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,879 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758765.224868583,6060844.846788196,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,910 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,910 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062679.335467041,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,926 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,941 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,941 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,941 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2758153.7286423002,6062985.083580181,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,957 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,957 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2758765.224868583,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,957 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,973 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,973 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2759070.9729817226,6060539.098675055,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,973 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2759376.7210948644,6060539.098675055,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,973 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,988 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2758765.224868583,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,988 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,988 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:57,988 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2758153.7286423002,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:57,988 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2758459.476755442,6062985.083580181,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:58,004 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:58,010 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2759070.9729817226,6062985.083580181,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:58,010 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:58,010 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:58,020 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2759376.7210948644,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:58,020 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2758459.476755442,6060539.098675055,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:58,020 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:51:58,020 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758153.7286423002,6062679.335467041,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:51:58,036 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:58,036 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:58,036 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:51:58,036 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:51:58,036 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:58,036 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:58,036 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:58,036 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:51:58,036 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:58,036 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:58,051 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:51:58,051 INFO [wfs.json] - about to encode JSON
2021-12-26 12:51:59,438 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:51:59,438 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:51:59,438 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:00,291 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:00,293 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:00,293 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:00,692 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:00,692 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:00,692 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:01,117 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:01,117 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:01,117 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:09,985 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:09,985 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:09,985 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:09,986 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:09,986 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:09,986 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:09,987 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}postboxes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getPostboxes_4Json}
2021-12-26 12:52:09,987 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:52:09,987 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:09,987 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:09,987 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:09,987 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:09,988 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}roadsmerged
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getRoads_2Json}
2021-12-26 12:52:09,988 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:09,988 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:09,988 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 12:52:09,988 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:09,989 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:10,077 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,079 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,080 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,093 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,103 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,103 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,105 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,110 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,110 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,118 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,134 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,134 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,206 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,230 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,248 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,267 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,274 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,294 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,345 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,370 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,402 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,405 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,405 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,410 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,424 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,424 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,431 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,439 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,445 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,448 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,452 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,477 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,504 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,530 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,537 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,565 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,576 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,583 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,584 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,587 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,588 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,596 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,599 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,612 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,621 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,632 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,639 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,654 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,675 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,681 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,682 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,688 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758765.224868583,6060844.846788196,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,698 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,700 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,702 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,706 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758765.224868583,6062679.335467041,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,710 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062679.335467041,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,711 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6060844.846788196,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,716 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,719 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,724 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6060844.846788196,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,725 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,727 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062679.335467041,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,731 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,732 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759376.7210948644,6060844.846788196,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,740 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759376.7210948644,6062679.335467041,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,743 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,745 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,752 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758153.7286423002,6060844.846788196,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,752 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,753 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758153.7286423002,6062679.335467041,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,760 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2758765.224868583,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,762 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,772 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2758765.224868583,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,773 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,775 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,781 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2759070.9729817226,6060539.098675055,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,783 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2759070.9729817226,6062985.083580181,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,784 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,791 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2758459.476755442,6060539.098675055,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,797 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,801 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,802 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,804 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2758459.476755442,6062985.083580181,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,808 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,809 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2759376.7210948644,6060539.098675055,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,809 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2759376.7210948644,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,817 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060233.350561914 : 6060539.098675055, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060233.350561914,2758153.7286423002,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,819 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 12:52:10,825 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:10,825 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:10,827 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062679.335467041 : 6062985.083580181, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062679.335467041,2758153.7286423002,6062985.083580181,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 12:52:10,828 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:52:10,828 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:52:10,829 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:10,829 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:10,833 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:10,835 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:10,836 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:10,842 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:10,845 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:10,845 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:12,002 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:12,003 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 12:52:12,004 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:12,934 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:12,935 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 12:52:12,935 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:13,686 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:13,687 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 12:52:13,687 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:15,850 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:15,852 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 12:52:15,852 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:17,353 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:17,353 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:17,353 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:18,446 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:18,447 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:18,448 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:19,316 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:19,319 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:19,319 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:19,965 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:19,966 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:19,967 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:20,814 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:20,815 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:20,815 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:21,263 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:21,264 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:21,265 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:23,358 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:23,360 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:23,360 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:24,163 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:24,167 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:24,167 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:25,372 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:25,373 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:25,374 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:26,599 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:26,599 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 12:52:26,599 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:28,252 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:28,253 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:28,254 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:28,254 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:28,254 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:28,254 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:28,254 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:28,256 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:28,256 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:28,263 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:28,265 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:28,266 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:28,280 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:28,282 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:28,282 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:28,311 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:28,313 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:28,313 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:28,322 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:28,323 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:28,324 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:28,505 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:28,505 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:28,507 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:28,649 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:28,651 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:28,651 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:29,746 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:29,747 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:29,747 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:29,912 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:29,913 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:29,914 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:32,958 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:32,958 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:32,973 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:32,973 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:32,973 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:32,973 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:32,973 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:32,973 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:32,973 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:33,007 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:33,008 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:33,008 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:33,015 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:33,016 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:33,016 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:33,278 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:33,280 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:33,280 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:37,851 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:37,852 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:37,853 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:37,860 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:37,862 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:37,862 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:37,881 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:37,883 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:37,884 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:37,915 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:37,916 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:37,917 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:38,305 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:38,306 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:38,307 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:43,068 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:43,070 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:43,070 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:43,075 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:43,077 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:43,077 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:43,098 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:43,099 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:43,100 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:43,110 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:43,110 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:43,110 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:43,138 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:43,140 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:43,140 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:43,554 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:43,556 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:43,556 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:47,646 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:47,646 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:47,646 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:47,681 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:47,682 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:47,682 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:47,715 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:47,718 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:47,718 INFO [wfs.json] - about to encode JSON
2021-12-26 12:52:47,912 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:52:47,913 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:52:47,914 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:02,575 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:02,579 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:02,580 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:02,583 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:02,585 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:02,586 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:02,612 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:02,614 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:02,614 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:02,824 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:02,826 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:02,826 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:05,647 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:05,648 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:05,648 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:05,937 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:05,939 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:05,939 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:15,004 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:15,005 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:15,005 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:15,035 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:15,037 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:15,037 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:15,085 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:15,087 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:15,088 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:15,544 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:15,545 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:15,546 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:18,733 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:18,734 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:18,734 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:18,770 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:18,770 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:18,770 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:19,272 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:19,274 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:19,275 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:22,064 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:22,066 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:22,066 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:34,805 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:34,807 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:34,808 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:34,815 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:34,817 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:34,817 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:34,854 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:34,856 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:34,856 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:35,535 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:35,537 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 12:53:35,537 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:38,878 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:38,879 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:38,880 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:38,886 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:38,887 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:38,888 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:38,917 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:38,918 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:38,918 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:39,210 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:39,211 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:39,212 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:46,458 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:46,458 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:46,458 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:46,493 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:46,494 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:46,495 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:46,532 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:46,534 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:46,535 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:47,039 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:47,041 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:47,041 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:47,554 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:47,556 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:47,556 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:47,591 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:47,594 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:47,594 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:50,338 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:50,340 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:50,340 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:50,369 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:50,370 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:50,370 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:54,799 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:54,800 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:54,801 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:54,807 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:54,808 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:54,808 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:54,840 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:54,841 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:54,842 INFO [wfs.json] - about to encode JSON
2021-12-26 12:53:55,244 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 12:53:55,245 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 12:53:55,245 INFO [wfs.json] - about to encode JSON
2021-12-26 13:03:33,732 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:03:33,734 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:03:33,734 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,685 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,686 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,686 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,687 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:04:14,688 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,688 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:04:14,688 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,688 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,689 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,690 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,690 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 13:04:14,690 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}postboxes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getPostboxes_4Json}
2021-12-26 13:04:14,690 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,690 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,691 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}roadsmerged
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getRoads_2Json}
2021-12-26 13:04:14,691 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,692 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:04:14,693 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,823 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,823 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,825 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:04:14,825 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:04:14,825 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,825 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,826 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,829 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:04:14,830 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,833 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:14,836 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:04:14,836 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:14,840 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,840 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,845 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,845 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,847 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,848 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,896 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757847.98052916,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,909 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,909 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,909 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,909 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,910 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,915 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,915 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759682.4692080044,6060539.098675055,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,928 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,934 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759682.4692080044,6062985.083580181,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,949 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,957 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757236.484302877,6061762.091127618,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,971 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:14,980 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:14,994 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,005 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757236.484302877,6060539.098675055,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,024 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,034 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759682.4692080044,6061150.594901337,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,036 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,041 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,044 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,048 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,048 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,048 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,049 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,050 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,051 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,058 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757847.98052916,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,060 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,061 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-12-26 13:04:15,063 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757236.484302877,6062373.5873539,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,066 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2758459.476755442,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,067 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-12-26 13:04:15,071 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,073 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759682.4692080044,6061762.091127618,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,075 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,076 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,079 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,082 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,131 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,135 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,140 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,169 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-12-26 13:04:15,180 INFO [geoserver.servlets] - OutputStream was successfully aborted.
2021-12-26 13:04:15,194 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,205 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,227 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,234 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,301 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,312 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,326 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,326 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,327 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,333 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,339 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,346 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,350 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,370 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,374 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,397 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,402 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,424 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,430 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,453 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,480 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,494 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,499 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,506 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,517 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,523 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,561 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,561 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,567 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,567 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,583 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,583 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,584 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,587 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:15,590 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,594 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,607 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:15,610 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,708 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,709 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,709 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,711 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,711 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,711 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,716 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758765.224868583,6062679.335467041,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,717 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758765.224868583,6060844.846788196,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,717 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062679.335467041,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,717 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062679.335467041,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,717 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6060844.846788196,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,718 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6060844.846788196,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,732 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,735 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,735 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,736 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:23,740 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759376.7210948644,6060844.846788196,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,740 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759376.7210948644,6062679.335467041,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,740 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758153.7286423002,6060844.846788196,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:23,743 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758153.7286423002,6062679.335467041,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:27,978 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:27,979 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:27,980 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:04:27,981 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:27,981 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}roadsmerged
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getRoads_2Json}
2021-12-26 13:04:27,982 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:27,983 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:27,983 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:27,984 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:27,984 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:27,985 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:04:27,985 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}postboxes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getPostboxes_4Json}
2021-12-26 13:04:27,985 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 13:04:27,985 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:04:27,986 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:27,986 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:27,986 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:27,989 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:28,080 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,086 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757847.98052916,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,100 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:28,100 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:28,102 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:04:28,102 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:04:28,102 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:28,102 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:28,105 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:28,107 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:28,108 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:04:28,108 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:28,110 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,110 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:04:28,110 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:28,117 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,130 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,130 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,130 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,132 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,139 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,145 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,154 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,156 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,157 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,158 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,297 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,301 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,305 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757847.98052916,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,312 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,313 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,314 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,319 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757847.98052916,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,320 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759070.9729817226,6060539.098675055,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,321 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,328 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757847.98052916,6062985.083580181,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,331 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,333 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,336 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,338 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757236.484302877,6061150.594901337,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,340 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759682.4692080044,6062373.5873539,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,343 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,345 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759682.4692080044,6061150.594901337,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,350 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757847.98052916,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,351 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,355 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,360 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2758459.476755442,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,363 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759682.4692080044,6061762.091127618,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,365 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,367 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,373 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757236.484302877,6062373.5873539,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,374 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,376 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757236.484302877,6062985.083580181,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,381 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,381 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,390 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,390 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757236.484302877,6061762.091127618,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,391 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,397 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757236.484302877,6060539.098675055,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,398 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,400 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759682.4692080044,6062985.083580181,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,406 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759682.4692080044,6060539.098675055,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:28,992 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,993 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,995 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:28,998 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,010 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,016 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,018 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,018 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,022 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,023 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,033 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,036 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,094 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,101 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,112 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,115 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,137 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,141 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,165 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,182 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,191 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,205 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,214 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,221 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,233 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,261 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,270 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,271 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,278 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6060844.846788196,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,279 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,280 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,292 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,294 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,305 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,305 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,319 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,384 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,391 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759376.7210948644,6060844.846788196,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,410 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,410 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,411 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,419 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6060844.846788196,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,440 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,440 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,446 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,448 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,453 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,473 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,476 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,483 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,491 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,500 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,507 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,515 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758765.224868583,6060844.846788196,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,534 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,539 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,554 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6060844.846788196, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758153.7286423002,6060844.846788196,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,567 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:29,575 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:29,575 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:36,035 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:36,035 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:36,036 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:36,037 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:36,037 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:36,041 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062679.335467041,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:36,041 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062679.335467041,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:36,042 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758765.224868583,6062679.335467041,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:36,044 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758153.7286423002,6062679.335467041,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:36,044 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062679.335467041, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759376.7210948644,6062679.335467041,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,176 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,177 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,177 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,178 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,178 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,178 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}postboxes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getPostboxes_4Json}
2021-12-26 13:04:55,178 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,178 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:04:55,179 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,179 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,179 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 13:04:55,180 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,180 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:04:55,180 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:04:55,180 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}roadsmerged
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getRoads_2Json}
2021-12-26 13:04:55,181 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,181 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,181 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,300 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,301 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,302 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:04:55,302 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,303 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,303 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:04:55,303 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,305 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:04:55,305 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:04:55,305 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,307 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:04:55,308 INFO [wfs.json] - about to encode JSON
2021-12-26 13:04:55,311 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,315 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,321 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,324 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,326 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,326 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,334 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757847.98052916,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,335 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,341 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,346 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,346 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,347 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,350 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,372 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,485 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,493 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757847.98052916,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,496 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,496 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,503 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759070.9729817226,6060539.098675055,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,503 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757847.98052916,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,507 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,514 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,517 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,520 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,520 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,526 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757847.98052916,6062985.083580181,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,528 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757236.484302877,6062373.5873539,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,528 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2758459.476755442,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,530 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,537 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,545 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,545 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,547 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,551 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757236.484302877,6061762.091127618,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,552 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,553 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759682.4692080044,6062985.083580181,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,554 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759682.4692080044,6060539.098675055,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,560 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757236.484302877,6060539.098675055,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,565 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,569 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,569 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,572 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759682.4692080044,6061762.091127618,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,575 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,576 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757236.484302877,6061150.594901337,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,577 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759682.4692080044,6062373.5873539,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,582 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757236.484302877,6062985.083580181,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,586 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,588 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:55,593 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759682.4692080044,6061150.594901337,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:55,595 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757847.98052916,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,139 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,139 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,139 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,139 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,140 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,142 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,161 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,162 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,162 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,162 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,163 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,164 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,217 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,251 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,295 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,310 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,316 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,317 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,332 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,332 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,339 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,352 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,364 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,366 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,376 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,388 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,391 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,398 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,403 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,409 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,413 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,423 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,438 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,447 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,452 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,469 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,471 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,475 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,491 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,493 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,518 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,536 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,546 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,561 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,569 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,573 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,579 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,581 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:04:56,584 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:04:56,601 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:05:03,556 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:03,559 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:05:03,559 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:05,062 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:05,065 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:05:05,066 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:06,153 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:06,156 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:05:06,157 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:07,216 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:07,217 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:05:07,218 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:08,696 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:08,699 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:05:08,699 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:09,197 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:09,198 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:05:09,199 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:09,928 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:09,930 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 13:05:09,930 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:10,750 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:10,751 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:05:10,751 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:12,394 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:12,395 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:05:12,395 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:13,462 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:13,464 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:05:13,464 INFO [wfs.json] - about to encode JSON
2021-12-26 13:05:15,072 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:05:15,075 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 13:05:15,075 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,563 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,563 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,563 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,578 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,578 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,578 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:06:42,578 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:06:42,578 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}roadsmerged
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getRoads_2Json}
2021-12-26 13:06:42,578 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,578 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,578 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,578 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}postboxes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getPostboxes_4Json}
2021-12-26 13:06:42,578 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,578 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,578 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:06:42,578 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,578 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 13:06:42,578 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,688 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,688 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,688 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:06:42,688 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,688 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:06:42,688 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,688 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,688 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:06:42,688 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:42,688 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,688 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:06:42,688 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:42,704 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,704 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,704 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,704 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,704 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,704 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,767 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757847.98052916,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,767 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,767 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,767 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,767 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,782 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,782 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,798 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,942 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,942 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,955 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759682.4692080044,6062985.083580181,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,955 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759682.4692080044,6061762.091127618,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,955 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,955 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,955 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759682.4692080044,6061150.594901337,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,955 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,971 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,971 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757847.98052916,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,971 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,986 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,986 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757236.484302877,6061762.091127618,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,986 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:42,986 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757236.484302877,6060539.098675055,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:42,986 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757847.98052916,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,002 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,002 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,002 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,002 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2758459.476755442,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,002 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759070.9729817226,6060539.098675055,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,002 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,002 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757847.98052916,6062985.083580181,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,018 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,018 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759682.4692080044,6060539.098675055,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,018 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,018 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,018 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,018 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,018 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757236.484302877,6061150.594901337,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,033 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757236.484302877,6062373.5873539,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,033 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,033 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,033 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757847.98052916,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,042 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757236.484302877,6062985.083580181,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,042 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759682.4692080044,6062373.5873539,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,535 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,535 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,535 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,535 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,535 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,535 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,551 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,551 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,551 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,551 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,551 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,551 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,614 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,646 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,677 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,692 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,708 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,724 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,743 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,771 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,771 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,787 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,787 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,802 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,802 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,818 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,865 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,865 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,865 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,881 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,881 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,881 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,896 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,896 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,896 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,896 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,912 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,912 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,928 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,928 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,928 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,944 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,944 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,944 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,944 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,959 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,959 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:43,975 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,975 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:43,975 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:06:58,635 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}residences
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getResidences_3Json}
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}roadsmerged
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getRoads_2Json}
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}postboxes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getPostboxes_4Json}
2021-12-26 13:06:58,635 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}lakes
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getLakes_5Json}
2021-12-26 13:06:58,635 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,635 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,635 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,635 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,651 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,666 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:06:58,666 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,760 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,760 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,760 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:06:58,760 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,760 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}trees
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getTrees_1Json}
2021-12-26 13:06:58,760 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,760 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,760 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:06:58,760 INFO [geoserver.wfs] - 
Request: getServiceInfo
2021-12-26 13:06:58,760 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,772 INFO [geoserver.wfs] - 
Request: getFeature
    service = WFS
    version = 1.0.0
    baseUrl = http://localhost:8080/geoserver/
    query[0]:
        srsName = EPSG:4326
        typeName[0] = {task5.com}farmfields
    outputFormat = text/javascript
    resultType = results
    formatOptions = {CALLBACK=getFarmfields_6Json}
2021-12-26 13:06:58,772 INFO [wfs.json] - about to encode JSON
2021-12-26 13:06:58,772 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,776 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,776 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,776 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,776 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,776 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,792 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757847.98052916,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,792 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,792 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,792 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,808 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2758459.476755442,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,808 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,808 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759070.9729817226,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,823 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,949 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,964 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2759682.4692080044,6061150.594901337,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,964 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,973 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,973 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,973 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759682.4692080044,6062373.5873539,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,973 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,973 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757236.484302877,6062373.5873539,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,980 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757236.484302877,6061150.594901337,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,980 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2758459.476755442,6062985.083580181,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,980 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,980 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,980 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,996 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2758459.476755442 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2758459.476755442,6060539.098675055,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,996 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759682.4692080044,6060539.098675055,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,996 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,996 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757236.484302877,6062985.083580181,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,996 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,996 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759682.4692080044,6061762.091127618,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,996 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:58,996 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060539.098675055 : 6061150.594901337, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060539.098675055,2757847.98052916,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:58,996 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,012 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757847.98052916,6060539.098675055,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,012 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2757847.98052916,6062985.083580181,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,012 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,012 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,012 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,012 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759682.4692080044 : 2760293.9654342853]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759682.4692080044,6062985.083580181,2760293.9654342853, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,027 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,027 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2757236.484302877,6060539.098675055,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,027 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,027 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061762.091127618, 2757236.484302877 : 2757847.98052916]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2757236.484302877,6061762.091127618,2757847.98052916, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,027 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6059927.6024487745 : 6060539.098675055, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6059927.6024487745,2759070.9729817226,6060539.098675055,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,027 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,027 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062373.5873539, 2757847.98052916 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2757847.98052916,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,043 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062373.5873539 : 6062985.083580181, 2759070.9729817226 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062373.5873539,2759070.9729817226,6062985.083580181,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,608 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,608 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,608 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,624 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,624 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,624 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,640 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759070.9729817226,6061762.091127618,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,640 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758765.224868583,6061456.343014478,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,640 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758765.224868583,6061762.091127618,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,655 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758765.224868583,6062067.839240759,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,655 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758459.476755442,6061762.091127618,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,655 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759070.9729817226,6061456.343014478,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,718 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,734 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759070.9729817226,6061150.594901337,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,765 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,781 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,781 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759070.9729817226,6062067.839240759,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,797 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758459.476755442,6062067.839240759,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,844 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,844 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,859 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,859 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2758153.7286423002,6061762.091127618,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,859 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,859 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758765.224868583,6061150.594901337,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,859 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,875 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,875 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758459.476755442,6061456.343014478,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,890 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2759376.7210948644,6061456.343014478,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,890 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061456.343014478 : 6061762.091127618, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061456.343014478,2759376.7210948644,6061762.091127618,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,890 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2759376.7210948644,6062067.839240759,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,953 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,968 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,975 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:06:59,975 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758765.224868583 : 2759070.9729817226]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758765.224868583,6062373.5873539,2759070.9729817226, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:06:59,985 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759070.9729817226 : 2759376.7210948644]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759070.9729817226,6062373.5873539,2759376.7210948644, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:07:00,000 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758459.476755442,6061150.594901337,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:07:00,031 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:07:00,031 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:07:00,047 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:07:00,047 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061762.091127618 : 6062067.839240759, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061762.091127618,2758153.7286423002,6062067.839240759,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:07:00,047 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6061150.594901337 : 6061456.343014478, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6061150.594901337,2758153.7286423002,6061456.343014478,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:07:00,047 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758459.476755442 : 2758765.224868583]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758459.476755442,6062373.5873539,2758765.224868583, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:07:00,063 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:07:00,063 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:07:00,063 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:07:00,063 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2758153.7286423002,6061150.594901337,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:07:00,075 INFO [geoserver.wms] - 
Request: getServiceInfo
2021-12-26 13:07:00,079 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2758153.7286423002 : 2758459.476755442]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2758153.7286423002,6062373.5873539,2758459.476755442, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:07:00,079 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6060844.846788196 : 6061150.594901337, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6060844.846788196,2759376.7210948644,6061150.594901337,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 13:07:00,079 INFO [geoserver.wms] - 
Request: getMap
	Angle = 0.0
	BaseUrl = http://localhost:8080/geoserver/
	Bbox = SRSEnvelope[6062067.839240759 : 6062373.5873539, 2759376.7210948644 : 2759682.4692080044]
	BgColor = java.awt.Color[r=255,g=255,b=255]
	Buffer = 0
	Clip = null
	CQLFilter = null
	Crs = PROJCS["WGS 84 / Pseudo-Mercator", 
  GEOGCS["WGS 84", 
    DATUM["World Geodetic System 1984", 
      SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
      AUTHORITY["EPSG","6326"]], 
    PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
    UNIT["degree", 0.017453292519943295], 
    AXIS["Geodetic longitude", EAST], 
    AXIS["Geodetic latitude", NORTH], 
    AUTHORITY["EPSG","4326"]], 
  PROJECTION["Popular Visualisation Pseudo Mercator", AUTHORITY["EPSG","1024"]], 
  PARAMETER["semi_minor", 6378137.0], 
  PARAMETER["latitude_of_origin", 0.0], 
  PARAMETER["central_meridian", 0.0], 
  PARAMETER["scale_factor", 1.0], 
  PARAMETER["false_easting", 0.0], 
  PARAMETER["false_northing", 0.0], 
  UNIT["m", 1.0], 
  AXIS["Easting", EAST], 
  AXIS["Northing", NORTH], 
  AUTHORITY["EPSG","3857"]]
	Elevation = []
	Env = {}
	Exceptions = SE_XML
	FeatureId = null
	FeatureVersion = null
	Filter = null
	Format = image/png
	FormatOptions = {}
	Get = true
	Height = 256
	Interpolations = []
	Layers = [org.geoserver.wms.MapLayerInfo@7a3e4ff0]
	MaxFeatures = null
	Palette = null
	RawKvp = {FORMAT=image/png, INFO_FORMAT=text/html, CONTINUOUSWORLD=true, STYLES=, WIDTH=256, HEIGHT=256, LAYERS=Task5:map, TILED=true, REQUEST=GetMap, SRS=EPSG:3857, BBOX=6062067.839240759,2759376.7210948644,6062373.5873539,2759682.4692080044, VERSION=1.1.1, SERVICE=WMS, TRANSPARENT=true}
	RemoteOwsType = null
	RemoteOwsURL = null
	Request = GetMap
	RequestCharset = UTF-8
	ScaleMethod = null
	Sld = null
	SldBody = null
	SldVersion = null
	SortBy = null
	SortByArrays = null
	SRS = EPSG:3857
	StartIndex = null
	StyleBody = null
	StyleFormat = sld
	Styles = [StyleImpl[ name=map]]
	StyleUrl = null
	StyleVersion = null
	Tiled = true
	TilesOrigin = null
	Time = []
	Transparent = true
	ValidateSchema = false
	Version = 1.1.1
	ViewParams = null
	Width = 256
2021-12-26 17:18:09,126 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 17:18:09,266 INFO [org.geoserver] - Loading catalog...
2021-12-26 17:18:09,438 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 17:18:09,438 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 17:18:09,438 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 17:18:09,438 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 17:18:09,438 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 17:18:09,438 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 17:18:09,438 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 17:18:09,438 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 17:18:09,438 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 17:18:09,454 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 17:18:09,485 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 17:18:09,516 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 17:18:09,532 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 17:18:09,532 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 17:18:09,532 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 17:18:09,532 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 17:18:09,548 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 17:18:09,548 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:09,548 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 17:18:09,563 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:09,563 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 17:18:09,563 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:09,563 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 17:18:09,563 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:09,563 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 17:18:09,563 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:09,563 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 17:18:09,563 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:09,563 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 17:18:09,563 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:09,563 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 17:18:09,563 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 17:18:09,563 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 17:18:10,908 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 17:18:13,252 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 17:18:13,283 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 17:18:13,283 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 17:18:13,314 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 17:18:13,314 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 17:18:13,314 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 17:18:13,345 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 17:18:13,361 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 17:18:13,361 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 17:18:13,392 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 17:18:13,392 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 17:18:14,064 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 17:18:14,174 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 17:18:14,189 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 17:18:14,189 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 17:18:14,189 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 17:18:14,205 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 17:18:14,205 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 17:18:14,205 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 17:18:14,220 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 17:18:14,220 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 17:18:14,220 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 17:18:14,220 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 17:18:14,267 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 17:18:14,267 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 17:18:14,299 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 17:18:14,970 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 17:18:15,017 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 17:18:15,017 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 17:18:15,017 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 17:18:15,033 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 17:18:15,033 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 17:18:15,033 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 17:18:15,033 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 17:18:15,033 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 17:18:15,049 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 17:18:15,049 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 17:18:15,064 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 17:18:15,064 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 17:18:15,095 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 17:18:15,142 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 17:18:15,142 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 17:18:15,158 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 17:18:15,158 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 17:18:15,158 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 17:18:15,158 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 17:18:15,158 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 17:18:15,174 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 17:18:15,205 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 17:18:15,252 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 17:18:15,252 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 17:18:15,252 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 17:18:15,252 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 17:18:15,252 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 17:18:15,267 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 17:18:15,267 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 17:18:15,267 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 17:18:15,267 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 17:18:15,314 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 17:18:15,314 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 17:18:15,361 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 17:18:15,361 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 17:18:15,361 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 17:18:15,361 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,361 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,361 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,361 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,361 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,361 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,361 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,377 INFO [org.geoserver] - Read catalog in 6.097 s
2021-12-26 17:18:15,377 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,377 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,377 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,377 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,377 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,377 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,377 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:18:15,658 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--41081894:17df752256a:-8000', enabled
2021-12-26 17:18:15,690 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 17:18:15,721 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 17:18:15,783 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 17:18:15,830 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 17:18:15,862 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 17:18:15,893 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 17:18:15,908 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 17:18:15,955 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:18:16,127 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:18:16,127 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:18:16,127 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:18:16,268 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:18:16,268 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 17:18:16,268 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 17:18:16,268 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:18:16,408 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 17:18:16,408 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 17:18:16,518 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 17:18:16,518 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 17:18:16,518 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 17:18:16,846 INFO [gwc.layer] - Loaded 29 tile layers in 325.2 ms
2021-12-26 17:18:16,862 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 17:18:16,877 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:18:16,877 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 17:18:16,877 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:18:17,018 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 17:18:17,143 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:18:17,158 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:18:17,174 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:18:17,190 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:18:17,190 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 17:18:17,190 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 17:18:17,190 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 17:18:17,237 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 17:18:17,520 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 17:18:17,535 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 17:18:17,551 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 17:18:17,677 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 17:18:17,677 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 17:18:24,728 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 17:18:25,843 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 17:18:31,404 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 17:18:31,408 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 17:18:31,409 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 17:18:31,412 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 17:18:31,412 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 17:18:31,412 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 17:18:31,417 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 17:18:31,417 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 17:18:31,420 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 17:18:31,422 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 17:18:31,422 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 17:18:31,423 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 17:18:31,448 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@79da2f0d[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@ee395c] rejected from java.util.concurrent.ThreadPoolExecutor@37e57a20[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 17:18:31,452 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 17:18:31,474 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 17:28:28,242 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 17:28:28,429 INFO [org.geoserver] - Loading catalog...
2021-12-26 17:28:28,664 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 17:28:28,664 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 17:28:28,664 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 17:28:28,664 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 17:28:28,664 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 17:28:28,680 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 17:28:28,695 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 17:28:28,695 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 17:28:28,695 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 17:28:28,695 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 17:28:28,695 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 17:28:28,695 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 17:28:28,758 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 17:28:28,836 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 17:28:28,836 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 17:28:28,836 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 17:28:28,851 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 17:28:28,851 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 17:28:28,883 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:28,883 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 17:28:28,883 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:28,883 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 17:28:28,883 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:28,883 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 17:28:28,898 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:28,898 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 17:28:28,898 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:28,898 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 17:28:28,898 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:28,898 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 17:28:28,914 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:28,914 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 17:28:28,914 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 17:28:28,914 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 17:28:28,914 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 17:28:29,836 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 17:28:32,258 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 17:28:32,290 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 17:28:32,290 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 17:28:32,321 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 17:28:32,321 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 17:28:32,336 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 17:28:32,368 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 17:28:32,368 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 17:28:32,368 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 17:28:32,399 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 17:28:32,415 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 17:28:32,430 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 17:28:32,524 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 17:28:32,524 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 17:28:32,868 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 17:28:32,946 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 17:28:32,961 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 17:28:32,961 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 17:28:32,961 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 17:28:32,977 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 17:28:32,977 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 17:28:32,977 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 17:28:32,993 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 17:28:32,993 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 17:28:32,993 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 17:28:33,024 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 17:28:33,555 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 17:28:33,602 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 17:28:33,602 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 17:28:33,602 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 17:28:33,602 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 17:28:33,618 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 17:28:33,618 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 17:28:33,618 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 17:28:33,618 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 17:28:33,633 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 17:28:33,633 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 17:28:33,649 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 17:28:33,649 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 17:28:33,680 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 17:28:33,727 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 17:28:33,727 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 17:28:33,727 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 17:28:33,727 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 17:28:33,743 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 17:28:33,743 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 17:28:33,743 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 17:28:33,743 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 17:28:33,774 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 17:28:33,821 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 17:28:33,821 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 17:28:33,821 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 17:28:33,821 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 17:28:33,836 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 17:28:33,836 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 17:28:33,836 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 17:28:33,836 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 17:28:33,836 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 17:28:33,883 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 17:28:33,883 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 17:28:33,915 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 17:28:33,930 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 17:28:33,930 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 17:28:33,930 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,930 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,930 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,930 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,930 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,930 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,930 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,930 INFO [org.geoserver] - Read catalog in 5.499 s
2021-12-26 17:28:33,946 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,946 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,946 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,946 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,946 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,946 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:33,946 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:28:34,227 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-65ea64ba:17df75b95b3:-8000', enabled
2021-12-26 17:28:34,243 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 17:28:34,290 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 17:28:34,336 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 17:28:34,368 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 17:28:34,383 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 17:28:34,415 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 17:28:34,446 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 17:28:34,477 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:28:34,649 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:28:34,649 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:28:34,649 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:28:34,774 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:28:34,774 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 17:28:34,774 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 17:28:34,774 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:28:34,852 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 17:28:34,852 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 17:28:34,930 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 17:28:34,930 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 17:28:34,930 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 17:28:35,211 INFO [gwc.layer] - Loaded 29 tile layers in 274.2 ms
2021-12-26 17:28:35,227 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 17:28:35,243 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:28:35,243 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 17:28:35,243 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:28:35,321 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 17:28:35,431 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:28:35,446 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:28:35,446 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:28:35,462 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:28:35,462 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 17:28:35,462 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 17:28:35,462 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 17:28:35,509 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 17:28:35,790 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 17:28:35,806 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 17:28:35,806 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 17:28:35,962 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 17:28:35,977 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 17:28:42,565 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 17:28:43,734 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 17:28:50,419 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 17:28:50,436 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 17:28:50,442 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 17:28:50,447 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 17:28:50,447 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 17:28:50,448 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 17:28:50,456 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 17:28:50,457 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 17:28:50,485 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 17:28:50,498 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 17:28:50,498 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 17:28:50,499 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 17:28:50,550 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@ee395c[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@7a0ebd12] rejected from java.util.concurrent.ThreadPoolExecutor@79da2f0d[Shutting down, pool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 17:28:50,564 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 17:28:50,588 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 17:47:27,506 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 17:47:27,569 INFO [org.geoserver] - Loading catalog...
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 17:47:27,647 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 17:47:27,663 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 17:47:27,694 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 17:47:27,710 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 17:47:27,710 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 17:47:27,710 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 17:47:27,710 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 17:47:27,726 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 17:47:27,726 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 17:47:27,726 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 17:47:27,726 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 17:47:27,726 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 17:47:27,726 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 17:47:27,726 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 17:47:27,726 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 17:47:28,056 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 17:47:28,716 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 17:47:28,731 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 17:47:28,731 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 17:47:28,747 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 17:47:28,747 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 17:47:28,747 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 17:47:28,904 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 17:47:28,904 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 17:47:28,904 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 17:47:28,920 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 17:47:28,920 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 17:47:29,045 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 17:47:29,097 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 17:47:29,097 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 17:47:29,097 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 17:47:29,097 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 17:47:29,108 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 17:47:29,108 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 17:47:29,108 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 17:47:29,108 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 17:47:29,108 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 17:47:29,108 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 17:47:29,108 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 17:47:29,124 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 17:47:29,124 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 17:47:29,139 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 17:47:29,343 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 17:47:29,359 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 17:47:29,359 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 17:47:29,359 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 17:47:29,359 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 17:47:29,359 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 17:47:29,359 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 17:47:29,359 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 17:47:29,359 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 17:47:29,375 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 17:47:29,375 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 17:47:29,375 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 17:47:29,375 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 17:47:29,390 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 17:47:29,406 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 17:47:29,406 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 17:47:29,406 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 17:47:29,406 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 17:47:29,406 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 17:47:29,406 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 17:47:29,406 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 17:47:29,406 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 17:47:29,422 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 17:47:29,437 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 17:47:29,437 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 17:47:29,437 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 17:47:29,453 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 17:47:29,453 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 17:47:29,453 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 17:47:29,453 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 17:47:29,469 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 17:47:29,469 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 17:47:29,469 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 17:47:29,469 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 17:47:29,484 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 17:47:29,484 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 17:47:29,484 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [org.geoserver] - Read catalog in 1.923 s
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,484 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:47:29,563 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--64f20723:17df76ce89b:-8000', enabled
2021-12-26 17:47:29,579 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 17:47:29,598 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 17:47:29,610 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 17:47:29,626 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 17:47:29,642 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 17:47:29,642 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 17:47:29,657 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 17:47:29,673 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:47:29,720 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:47:29,720 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:47:29,720 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:47:29,752 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:47:29,752 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 17:47:29,752 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 17:47:29,752 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:47:29,783 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 17:47:29,783 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 17:47:29,814 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 17:47:29,814 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 17:47:29,814 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 17:47:29,892 INFO [gwc.layer] - Loaded 29 tile layers in 82.72 ms
2021-12-26 17:47:29,914 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 17:47:29,914 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:47:29,914 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 17:47:29,914 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:47:29,957 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 17:47:29,988 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:47:30,004 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:47:30,004 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:47:30,004 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:47:30,004 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 17:47:30,004 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 17:47:30,004 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 17:47:30,020 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 17:47:30,130 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 17:47:30,130 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 17:47:30,130 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 17:47:30,208 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 17:47:30,208 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 17:47:32,043 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 17:47:32,304 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 17:47:33,544 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 17:47:33,544 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 17:47:33,544 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 17:47:33,559 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 17:47:33,559 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 17:47:33,559 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 17:47:33,559 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 17:47:33,559 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 17:47:33,559 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 17:47:33,559 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 17:47:33,559 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 17:47:33,559 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 17:47:33,559 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@7d7be366[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@6153b116] rejected from java.util.concurrent.ThreadPoolExecutor@2095e085[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 17:47:33,559 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 17:47:33,575 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 17:52:29,601 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 17:52:29,648 INFO [org.geoserver] - Loading catalog...
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 17:52:29,716 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 17:52:29,727 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 17:52:29,727 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 17:52:29,743 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 17:52:29,743 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 17:52:29,743 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 17:52:29,743 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 17:52:29,743 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 17:52:29,743 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 17:52:29,743 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 17:52:29,758 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:29,758 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 17:52:29,758 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:29,758 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 17:52:29,758 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:29,758 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 17:52:29,758 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:29,758 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 17:52:29,758 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:29,758 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 17:52:29,758 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:29,758 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 17:52:29,758 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:29,758 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 17:52:29,758 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 17:52:30,059 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 17:52:30,846 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 17:52:30,857 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 17:52:30,859 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 17:52:30,995 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 17:52:30,995 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 17:52:30,995 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 17:52:31,011 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 17:52:31,015 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 17:52:31,017 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 17:52:31,021 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 17:52:31,023 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 17:52:31,193 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 17:52:31,218 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 17:52:31,218 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 17:52:31,218 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 17:52:31,218 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 17:52:31,225 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 17:52:31,225 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 17:52:31,225 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 17:52:31,225 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 17:52:31,225 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 17:52:31,225 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 17:52:31,225 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 17:52:31,225 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 17:52:31,225 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 17:52:31,432 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 17:52:31,435 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 17:52:31,437 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 17:52:31,438 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 17:52:31,439 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 17:52:31,440 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 17:52:31,442 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 17:52:31,442 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 17:52:31,443 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 17:52:31,444 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 17:52:31,445 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 17:52:31,448 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 17:52:31,451 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 17:52:31,453 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 17:52:31,462 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 17:52:31,466 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 17:52:31,466 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 17:52:31,468 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 17:52:31,469 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 17:52:31,471 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 17:52:31,472 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 17:52:31,474 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 17:52:31,474 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 17:52:31,479 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 17:52:31,483 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 17:52:31,484 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 17:52:31,487 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 17:52:31,491 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 17:52:31,492 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 17:52:31,493 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 17:52:31,494 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 17:52:31,496 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 17:52:31,497 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 17:52:31,499 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 17:52:31,499 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 17:52:31,508 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 17:52:31,511 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 17:52:31,512 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 17:52:31,513 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,513 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,513 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,513 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,513 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,513 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,513 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,514 INFO [org.geoserver] - Read catalog in 1.853 s
2021-12-26 17:52:31,515 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,515 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,516 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,516 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,516 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,516 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,516 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:52:31,588 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-78091e77:17df7718463:-8000', enabled
2021-12-26 17:52:31,593 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 17:52:31,594 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 17:52:31,594 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 17:52:31,619 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 17:52:31,623 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 17:52:31,627 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 17:52:31,631 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 17:52:31,648 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:52:31,706 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:52:31,706 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:52:31,707 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:52:31,736 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:52:31,736 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 17:52:31,736 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 17:52:31,736 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:52:31,769 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 17:52:31,770 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 17:52:31,799 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 17:52:31,799 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 17:52:31,800 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 17:52:31,829 INFO [gwc.layer] - Loaded 29 tile layers in 29.54 ms
2021-12-26 17:52:31,837 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 17:52:31,842 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:52:31,842 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 17:52:31,842 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:52:31,885 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 17:52:31,929 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:52:31,933 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:52:31,935 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:52:31,939 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:52:31,940 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 17:52:31,940 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 17:52:31,941 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 17:52:31,962 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 17:52:32,076 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 17:52:32,084 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 17:52:32,087 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 17:52:32,153 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 17:52:32,153 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 17:52:33,960 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 17:52:34,302 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 17:52:35,752 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 17:52:35,755 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 17:52:35,756 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 17:52:35,757 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 17:52:35,758 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 17:52:35,758 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 17:52:35,762 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 17:52:35,762 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 17:52:35,763 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 17:52:35,764 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 17:52:35,764 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 17:52:35,765 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 17:52:35,774 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@49d94d67[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@380cb7e3] rejected from java.util.concurrent.ThreadPoolExecutor@6153b116[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 17:52:35,776 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 17:52:35,788 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 17:53:15,864 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 17:53:15,950 INFO [org.geoserver] - Loading catalog...
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 17:53:16,047 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 17:53:16,063 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 17:53:16,094 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 17:53:16,094 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 17:53:16,094 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 17:53:16,094 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 17:53:16,094 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 17:53:16,094 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 17:53:16,110 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:16,110 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 17:53:16,110 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:16,110 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 17:53:16,110 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:16,110 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 17:53:16,110 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:16,110 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 17:53:16,110 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:16,110 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 17:53:16,110 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:16,110 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 17:53:16,110 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:16,110 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 17:53:16,110 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 17:53:16,110 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 17:53:16,445 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 17:53:17,371 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 17:53:17,386 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 17:53:17,386 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 17:53:17,386 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 17:53:17,386 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 17:53:17,386 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 17:53:17,402 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 17:53:17,402 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 17:53:17,402 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 17:53:17,402 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 17:53:17,402 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 17:53:17,528 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 17:53:17,543 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 17:53:17,559 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 17:53:17,559 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 17:53:17,559 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 17:53:17,559 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 17:53:17,559 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 17:53:17,559 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 17:53:17,559 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 17:53:17,559 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 17:53:17,575 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 17:53:17,575 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 17:53:17,575 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 17:53:17,575 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 17:53:17,732 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 17:53:17,748 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 17:53:17,748 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 17:53:17,763 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 17:53:17,763 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 17:53:17,763 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 17:53:17,763 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 17:53:17,763 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 17:53:17,763 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 17:53:17,763 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 17:53:17,763 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 17:53:17,763 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 17:53:17,779 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 17:53:17,779 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 17:53:17,779 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 17:53:17,779 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 17:53:17,779 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 17:53:17,779 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 17:53:17,779 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 17:53:17,779 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 17:53:17,794 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 17:53:17,794 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 17:53:17,794 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 17:53:17,794 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 17:53:17,794 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 17:53:17,794 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 17:53:17,794 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 17:53:17,794 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,794 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,794 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,794 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,794 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,794 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,794 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,810 INFO [org.geoserver] - Read catalog in 1.851 s
2021-12-26 17:53:17,810 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,810 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,810 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,810 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,810 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,810 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,810 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:17,889 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--78435095:17df7723941:-8000', enabled
2021-12-26 17:53:17,889 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 17:53:17,905 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 17:53:17,921 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 17:53:17,921 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 17:53:17,936 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 17:53:17,936 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 17:53:17,947 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 17:53:17,970 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:53:18,034 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:53:18,034 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:53:18,034 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:53:18,073 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:53:18,073 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 17:53:18,073 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 17:53:18,073 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:53:18,116 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 17:53:18,117 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 17:53:18,151 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 17:53:18,151 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 17:53:18,151 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 17:53:18,187 INFO [gwc.layer] - Loaded 29 tile layers in 34.74 ms
2021-12-26 17:53:18,197 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 17:53:18,207 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:53:18,207 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 17:53:18,207 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:53:18,248 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 17:53:18,297 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:53:18,314 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:53:18,314 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:53:18,314 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:53:18,314 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 17:53:18,314 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 17:53:18,314 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 17:53:18,344 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 17:53:18,500 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 17:53:18,531 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 17:53:18,531 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 17:53:18,625 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 17:53:18,625 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 17:53:20,493 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 17:53:20,760 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 17:53:22,177 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 17:53:22,177 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 17:53:22,177 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 17:53:22,177 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 17:53:22,177 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 17:53:22,177 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 17:53:22,177 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 17:53:22,177 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 17:53:22,177 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 17:53:22,177 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 17:53:22,177 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 17:53:22,177 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 17:53:22,197 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@49d94d67[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@380cb7e3] rejected from java.util.concurrent.ThreadPoolExecutor@6153b116[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 17:53:22,199 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 17:53:22,207 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 17:53:26,897 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 17:53:26,946 INFO [org.geoserver] - Loading catalog...
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 17:53:27,022 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 17:53:27,047 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 17:53:27,054 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 17:53:27,054 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 17:53:27,069 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 17:53:27,069 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 17:53:27,069 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 17:53:27,069 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 17:53:27,069 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 17:53:27,069 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 17:53:27,069 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:27,069 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 17:53:27,069 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:27,069 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 17:53:27,069 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:27,069 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 17:53:27,085 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:27,085 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 17:53:27,085 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:27,085 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 17:53:27,085 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:27,085 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 17:53:27,085 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:27,085 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 17:53:27,357 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 17:53:28,017 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 17:53:28,033 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 17:53:28,033 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 17:53:28,242 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 17:53:28,243 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 17:53:28,243 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 17:53:28,248 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 17:53:28,248 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 17:53:28,253 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 17:53:28,253 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 17:53:28,253 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 17:53:28,401 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 17:53:28,432 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 17:53:28,432 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 17:53:28,432 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 17:53:28,432 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 17:53:28,432 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 17:53:28,432 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 17:53:28,432 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 17:53:28,432 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 17:53:28,448 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 17:53:28,448 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 17:53:28,448 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 17:53:28,448 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 17:53:28,448 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 17:53:28,448 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 17:53:28,636 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 17:53:28,636 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 17:53:28,636 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 17:53:28,636 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 17:53:28,648 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 17:53:28,648 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 17:53:28,648 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 17:53:28,652 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 17:53:28,652 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 17:53:28,652 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 17:53:28,652 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 17:53:28,652 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 17:53:28,652 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 17:53:28,652 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 17:53:28,668 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 17:53:28,668 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 17:53:28,668 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 17:53:28,668 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 17:53:28,668 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 17:53:28,668 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 17:53:28,668 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 17:53:28,668 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 17:53:28,668 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 17:53:28,683 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 17:53:28,683 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 17:53:28,683 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 17:53:28,683 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 17:53:28,683 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 17:53:28,683 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 17:53:28,683 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 17:53:28,699 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 17:53:28,699 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 17:53:28,699 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 17:53:28,699 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 17:53:28,699 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 17:53:28,699 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 17:53:28,699 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [org.geoserver] - Read catalog in 1.763 s
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,715 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:53:28,778 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-5dacc7d0:17df77263ca:-8000', enabled
2021-12-26 17:53:28,793 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 17:53:28,793 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 17:53:28,809 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 17:53:28,824 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 17:53:28,824 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 17:53:28,824 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 17:53:28,840 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 17:53:28,856 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:53:28,903 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:53:28,903 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:53:28,903 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:53:28,934 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:53:28,934 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 17:53:28,934 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 17:53:28,934 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:53:28,966 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 17:53:28,966 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 17:53:28,997 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 17:53:28,997 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 17:53:28,997 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 17:53:29,028 INFO [gwc.layer] - Loaded 29 tile layers in 27.23 ms
2021-12-26 17:53:29,044 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 17:53:29,049 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 17:53:29,049 INFO [storage.DefaultStorageFinder] - *** Found Java environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 17:53:29,049 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 17:53:29,091 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 17:53:29,138 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:53:29,138 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:53:29,149 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:53:29,154 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:53:29,154 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 17:53:29,154 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 17:53:29,154 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500,0 MB
2021-12-26 17:53:29,170 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 17:53:29,309 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 17:53:29,325 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 17:53:29,325 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 17:53:29,403 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 17:53:29,403 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 17:53:30,996 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 17:53:31,268 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 17:53:32,529 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 17:53:32,529 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 17:53:32,529 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 17:53:32,529 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 17:53:32,529 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 17:53:32,529 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 17:53:32,529 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 17:53:32,529 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 17:53:32,529 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 17:53:32,529 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 17:53:32,529 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 17:53:32,529 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 17:53:32,544 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@f777d41[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@38328799] rejected from java.util.concurrent.ThreadPoolExecutor@2a0a5865[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 17:53:32,544 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 17:53:32,560 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 17:54:00,289 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 17:54:00,337 INFO [org.geoserver] - Loading catalog...
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 17:54:00,399 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 17:54:00,413 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 17:54:00,415 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 17:54:00,431 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 17:54:00,431 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 17:54:00,431 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 17:54:00,431 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 17:54:00,431 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 17:54:00,446 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 17:54:00,446 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 17:54:00,446 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 17:54:00,446 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 17:54:00,446 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 17:54:00,446 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 17:54:00,446 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 17:54:00,446 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 17:54:00,697 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 17:54:01,334 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 17:54:01,350 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 17:54:01,350 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 17:54:01,491 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 17:54:01,491 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 17:54:01,491 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 17:54:01,491 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 17:54:01,491 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 17:54:01,491 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 17:54:01,491 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 17:54:01,507 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 17:54:01,617 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 17:54:01,633 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 17:54:01,633 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 17:54:01,648 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 17:54:01,648 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 17:54:01,648 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 17:54:01,648 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 17:54:01,648 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 17:54:01,648 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 17:54:01,664 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 17:54:01,664 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 17:54:01,664 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 17:54:01,664 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 17:54:01,664 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 17:54:01,664 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 17:54:01,837 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 17:54:01,837 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 17:54:01,837 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 17:54:01,837 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 17:54:01,837 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 17:54:01,837 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 17:54:01,837 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 17:54:01,852 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 17:54:01,852 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 17:54:01,852 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 17:54:01,852 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 17:54:01,852 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 17:54:01,852 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 17:54:01,852 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 17:54:01,868 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 17:54:01,868 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 17:54:01,868 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 17:54:01,868 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 17:54:01,868 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 17:54:01,868 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 17:54:01,868 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 17:54:01,868 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 17:54:01,883 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 17:54:01,883 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 17:54:01,883 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 17:54:01,883 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 17:54:01,883 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 17:54:01,883 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 17:54:01,883 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 17:54:01,899 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 17:54:01,899 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 17:54:01,899 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 17:54:01,899 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 17:54:01,899 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 17:54:01,915 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 17:54:01,917 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 17:54:01,917 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [org.geoserver] - Read catalog in 1.578 s
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,917 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:01,996 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-ef0d812:17df772e58c:-8000', enabled
2021-12-26 17:54:01,996 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 17:54:02,011 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 17:54:02,017 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 17:54:02,027 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 17:54:02,027 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 17:54:02,027 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 17:54:02,043 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 17:54:02,059 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:54:02,106 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:54:02,106 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:54:02,106 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:54:02,137 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:54:02,137 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 17:54:02,137 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 17:54:02,137 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:54:02,168 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 17:54:02,168 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 17:54:02,214 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 17:54:02,214 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 17:54:02,214 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 17:54:02,237 INFO [gwc.layer] - Loaded 29 tile layers in 29.17 ms
2021-12-26 17:54:02,252 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 17:54:02,252 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 17:54:02,252 INFO [storage.DefaultStorageFinder] - *** Found Java environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 17:54:02,252 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 17:54:02,300 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 17:54:02,347 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:54:02,362 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:54:02,362 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:54:02,362 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:54:02,362 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 17:54:02,362 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 17:54:02,362 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500,0 MB
2021-12-26 17:54:02,394 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 17:54:02,490 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 17:54:02,505 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 17:54:02,505 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 17:54:02,568 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 17:54:02,568 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 17:54:04,208 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 17:54:04,453 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 17:54:05,704 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 17:54:05,704 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 17:54:05,704 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 17:54:05,704 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 17:54:05,704 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 17:54:05,704 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 17:54:05,704 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 17:54:05,704 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 17:54:05,704 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 17:54:05,704 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 17:54:05,704 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 17:54:05,704 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 17:54:05,704 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@3f92977a[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@2a0a5865] rejected from java.util.concurrent.ThreadPoolExecutor@1330d15e[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 17:54:05,719 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 17:54:05,726 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 17:54:32,157 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 17:54:32,220 INFO [org.geoserver] - Loading catalog...
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 17:54:32,284 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 17:54:32,299 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 17:54:32,299 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 17:54:32,299 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 17:54:32,299 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 17:54:32,299 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 17:54:32,299 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 17:54:32,312 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 17:54:32,323 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 17:54:32,323 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 17:54:32,323 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 17:54:32,323 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 17:54:32,323 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 17:54:32,323 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 17:54:32,323 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 17:54:32,339 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:32,339 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 17:54:32,339 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:32,339 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 17:54:32,339 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:32,339 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 17:54:32,339 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:32,339 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 17:54:32,339 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:32,339 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 17:54:32,339 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:32,339 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 17:54:32,339 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:32,339 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 17:54:32,339 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 17:54:32,637 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 17:54:33,579 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 17:54:33,592 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 17:54:33,594 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 17:54:33,599 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 17:54:33,600 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 17:54:33,602 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 17:54:33,606 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 17:54:33,608 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 17:54:33,609 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 17:54:33,613 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 17:54:33,614 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 17:54:33,810 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 17:54:33,837 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 17:54:33,839 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 17:54:33,843 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 17:54:33,845 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 17:54:33,848 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 17:54:33,850 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 17:54:33,854 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 17:54:33,855 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 17:54:33,859 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 17:54:33,860 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 17:54:33,861 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 17:54:33,866 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 17:54:33,867 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 17:54:33,872 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 17:54:34,068 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 17:54:34,083 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 17:54:34,084 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 17:54:34,090 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 17:54:34,096 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 17:54:34,097 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 17:54:34,099 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 17:54:34,100 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 17:54:34,102 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 17:54:34,103 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 17:54:34,105 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 17:54:34,105 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 17:54:34,110 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 17:54:34,114 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 17:54:34,114 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 17:54:34,116 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 17:54:34,116 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 17:54:34,118 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 17:54:34,118 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 17:54:34,120 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 17:54:34,120 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 17:54:34,122 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 17:54:34,124 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 17:54:34,125 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 17:54:34,135 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 17:54:34,136 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 17:54:34,137 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 17:54:34,138 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,138 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,138 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,138 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,138 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,138 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,138 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,139 INFO [org.geoserver] - Read catalog in 1.917 s
2021-12-26 17:54:34,140 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,140 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,140 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,140 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,140 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,140 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,140 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:54:34,237 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-7102086c:17df773637d:-8000', enabled
2021-12-26 17:54:34,245 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 17:54:34,255 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 17:54:34,266 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 17:54:34,278 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 17:54:34,282 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 17:54:34,286 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 17:54:34,293 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 17:54:34,315 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:54:34,372 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:54:34,373 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:54:34,373 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:54:34,405 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:54:34,405 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 17:54:34,405 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 17:54:34,405 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:54:34,444 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 17:54:34,445 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 17:54:34,482 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 17:54:34,483 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 17:54:34,483 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 17:54:34,519 INFO [gwc.layer] - Loaded 29 tile layers in 35.43 ms
2021-12-26 17:54:34,528 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 17:54:34,536 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:54:34,536 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 17:54:34,536 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:54:34,593 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 17:54:34,655 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:54:34,663 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:54:34,665 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:54:34,672 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:54:34,673 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 17:54:34,673 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 17:54:34,674 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 17:54:34,701 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 17:54:34,874 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 17:54:34,888 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 17:54:34,891 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 17:54:34,990 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 17:54:34,990 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 17:54:37,003 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 17:54:37,302 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 17:54:38,907 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 17:54:38,909 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 17:54:38,909 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 17:54:38,910 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 17:54:38,910 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 17:54:38,910 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 17:54:38,913 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 17:54:38,913 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 17:54:38,914 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 17:54:38,914 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 17:54:38,915 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 17:54:38,915 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 17:54:38,922 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@6153b116[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@49d94d67] rejected from java.util.concurrent.ThreadPoolExecutor@7d7be366[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 17:54:38,924 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 17:54:38,934 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 17:56:26,813 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 17:56:26,891 INFO [org.geoserver] - Loading catalog...
2021-12-26 17:56:27,032 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 17:56:27,032 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 17:56:27,032 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 17:56:27,032 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 17:56:27,032 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 17:56:27,032 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 17:56:27,032 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 17:56:27,032 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 17:56:27,032 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 17:56:27,047 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 17:56:27,047 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 17:56:27,048 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 17:56:27,080 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 17:56:27,127 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 17:56:27,142 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 17:56:27,147 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 17:56:27,147 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 17:56:27,147 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 17:56:27,158 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:27,158 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 17:56:27,174 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:27,174 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 17:56:27,174 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:27,174 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 17:56:27,174 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:27,174 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 17:56:27,174 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:27,174 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 17:56:27,174 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:27,174 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 17:56:27,174 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:27,174 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 17:56:27,174 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 17:56:27,174 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 17:56:27,190 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 17:56:28,226 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 17:56:30,203 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 17:56:30,218 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 17:56:30,218 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 17:56:30,234 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 17:56:30,234 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 17:56:30,250 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 17:56:30,266 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 17:56:30,266 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 17:56:30,281 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 17:56:30,297 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 17:56:30,297 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 17:56:30,579 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 17:56:30,657 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 17:56:30,657 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 17:56:30,657 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 17:56:30,657 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 17:56:30,657 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 17:56:30,672 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 17:56:30,672 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 17:56:30,672 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 17:56:30,672 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 17:56:30,688 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 17:56:30,688 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 17:56:30,704 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 17:56:30,719 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 17:56:31,095 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 17:56:31,126 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 17:56:31,142 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 17:56:31,142 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 17:56:31,142 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 17:56:31,142 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 17:56:31,142 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 17:56:31,142 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 17:56:31,142 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 17:56:31,157 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 17:56:31,157 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 17:56:31,173 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 17:56:31,173 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 17:56:31,173 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 17:56:31,204 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 17:56:31,235 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 17:56:31,235 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 17:56:31,251 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 17:56:31,251 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 17:56:31,251 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 17:56:31,251 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 17:56:31,251 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 17:56:31,251 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 17:56:31,282 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 17:56:31,313 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 17:56:31,329 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 17:56:31,329 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 17:56:31,329 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 17:56:31,329 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 17:56:31,329 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 17:56:31,329 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 17:56:31,329 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 17:56:31,345 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 17:56:31,376 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 17:56:31,376 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 17:56:31,407 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 17:56:31,407 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 17:56:31,423 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [org.geoserver] - Read catalog in 4.522 s
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,423 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 17:56:31,563 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-14ec66ba:17df7752dcb:-8000', enabled
2021-12-26 17:56:31,579 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 17:56:31,610 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 17:56:31,642 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 17:56:31,673 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 17:56:31,688 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 17:56:31,704 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 17:56:31,735 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 17:56:31,767 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:56:31,860 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:56:31,860 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:56:31,860 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 17:56:31,938 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:56:31,938 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 17:56:31,938 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 17:56:31,938 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 17:56:32,001 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 17:56:32,001 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 17:56:32,063 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 17:56:32,063 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 17:56:32,063 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 17:56:32,204 INFO [gwc.layer] - Loaded 29 tile layers in 142.9 ms
2021-12-26 17:56:32,220 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 17:56:32,220 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:56:32,235 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 17:56:32,235 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 17:56:32,313 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 17:56:32,407 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:56:32,407 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 17:56:32,407 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:56:32,423 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 17:56:32,423 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 17:56:32,423 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 17:56:32,423 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 17:56:32,454 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 17:56:32,626 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 17:56:32,642 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 17:56:32,642 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 17:56:32,751 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 17:56:32,751 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 17:56:36,048 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 17:56:36,798 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 17:56:41,444 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 17:56:41,449 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 17:56:41,450 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 17:56:41,456 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 17:56:41,456 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 17:56:41,456 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 17:56:41,460 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 17:56:41,460 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 17:56:41,462 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 17:56:41,463 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 17:56:41,463 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 17:56:41,464 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 17:56:41,477 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@37e57a20[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@79da2f0d] rejected from java.util.concurrent.ThreadPoolExecutor@380cb7e3[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 17:56:41,479 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 17:56:41,497 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:02:46,306 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:02:46,364 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:02:46,435 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:02:46,436 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:02:46,436 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:02:46,437 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:02:46,437 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:02:46,438 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:02:46,439 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:02:46,439 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:02:46,439 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:02:46,440 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:02:46,441 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:02:46,442 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:02:46,442 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:02:46,443 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:02:46,444 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:02:46,445 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:02:46,446 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:02:46,446 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:02:46,447 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:02:46,447 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:02:46,447 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:02:46,459 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:02:46,474 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:02:46,478 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:02:46,479 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:02:46,480 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:02:46,482 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:02:46,483 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:02:46,485 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:02:46,491 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:46,491 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:02:46,492 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:46,492 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:02:46,493 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:46,494 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:02:46,494 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:46,494 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:02:46,495 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:46,496 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:02:46,497 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:46,497 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:02:46,498 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:46,498 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:02:46,499 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:02:46,795 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:02:47,542 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:02:47,553 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:02:47,554 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:02:47,710 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:02:47,711 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:02:47,712 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:02:47,718 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:02:47,719 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:02:47,721 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:02:47,726 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:02:47,728 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:02:47,869 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:02:47,898 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:02:47,899 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:02:47,903 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:02:47,904 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:02:47,908 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:02:47,908 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:02:47,911 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:02:47,913 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:02:47,916 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:02:47,918 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:02:47,919 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:02:47,924 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:02:47,925 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:02:47,929 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:02:48,127 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:02:48,130 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:02:48,132 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:02:48,132 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:02:48,133 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:02:48,134 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:02:48,134 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:02:48,135 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:02:48,136 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:02:48,136 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:02:48,137 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:02:48,140 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:02:48,142 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:02:48,145 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:02:48,149 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:02:48,150 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:02:48,152 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:02:48,153 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:02:48,154 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:02:48,155 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:02:48,158 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:02:48,159 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:02:48,163 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:02:48,167 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:02:48,168 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:02:48,170 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:02:48,173 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:02:48,174 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:02:48,175 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:02:48,176 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:02:48,178 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:02:48,179 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:02:48,181 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:02:48,182 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:02:48,195 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:02:48,197 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:02:48,198 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:02:48,199 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,199 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,199 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,199 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,199 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,199 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,199 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,201 INFO [org.geoserver] - Read catalog in 1.836 s
2021-12-26 18:02:48,202 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,202 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,202 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,202 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,202 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,202 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,202 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:02:48,270 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-78d60fea:17df77aed4e:-8000', enabled
2021-12-26 18:02:48,276 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:02:48,284 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:02:48,295 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:02:48,306 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:02:48,310 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:02:48,313 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:02:48,317 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:02:48,334 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:02:48,396 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:02:48,396 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:02:48,396 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:02:48,441 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:02:48,441 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:02:48,441 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:02:48,441 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:02:48,479 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:02:48,480 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:02:48,512 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:02:48,513 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:02:48,513 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:02:48,544 INFO [gwc.layer] - Loaded 29 tile layers in 30.54 ms
2021-12-26 18:02:48,551 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:02:48,558 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:02:48,558 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:02:48,558 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:02:48,602 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:02:48,650 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:02:48,655 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:02:48,657 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:02:48,661 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:02:48,662 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:02:48,662 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:02:48,663 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 18:02:48,684 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:02:48,799 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:02:48,808 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:02:48,811 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:02:48,876 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:02:48,877 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:02:50,896 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:02:51,258 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:02:52,574 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:02:52,576 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:02:52,576 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:02:52,577 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:02:52,577 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:02:52,577 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:02:52,579 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:02:52,579 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:02:52,580 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:02:52,580 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:02:52,581 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:02:52,581 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:02:52,585 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@49d94d67[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@380cb7e3] rejected from java.util.concurrent.ThreadPoolExecutor@6153b116[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:02:52,587 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:02:52,595 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:03:55,409 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:03:55,455 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:03:55,518 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:03:55,534 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:03:55,550 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:03:55,550 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:03:55,565 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:03:55,565 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:03:55,565 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:03:55,565 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:03:55,565 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:55,565 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:03:55,565 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:55,565 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:03:55,581 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:55,581 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:03:55,581 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:55,581 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:03:55,581 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:55,581 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:03:55,581 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:55,581 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:03:55,581 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:55,581 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:03:55,581 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:03:55,581 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:03:55,581 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:03:55,879 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:03:56,702 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:03:56,711 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:03:56,711 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:03:56,711 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:03:56,711 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:03:56,727 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:03:56,727 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:03:56,727 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:03:56,727 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:03:56,727 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:03:56,742 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:03:56,868 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:03:56,903 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:03:56,903 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:03:56,903 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:03:56,915 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:03:56,915 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:03:56,915 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:03:56,915 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:03:56,915 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:03:56,931 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:03:56,931 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:03:56,931 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:03:56,931 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:03:56,931 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:03:57,103 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:03:57,103 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:03:57,103 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:03:57,103 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:03:57,103 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:03:57,103 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:03:57,103 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:03:57,119 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:03:57,119 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:03:57,119 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:03:57,119 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:03:57,119 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:03:57,119 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:03:57,119 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:03:57,134 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:03:57,134 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:03:57,134 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:03:57,150 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:03:57,150 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:03:57,150 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:03:57,150 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:03:57,150 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:03:57,150 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:03:57,150 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:03:57,165 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:03:57,165 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:03:57,165 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:03:57,165 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:03:57,165 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:03:57,165 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:03:57,165 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:03:57,165 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:03:57,165 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:03:57,181 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:03:57,181 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:03:57,181 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:03:57,181 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:03:57,181 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:03:57,181 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,181 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,181 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,181 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,197 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,197 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,197 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,197 INFO [org.geoserver] - Read catalog in 1.730 s
2021-12-26 18:03:57,197 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,203 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,203 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,203 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,203 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,203 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,203 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:03:57,291 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-27f12e67:17df77bfaeb:-8000', enabled
2021-12-26 18:03:57,303 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:03:57,307 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:03:57,323 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:03:57,338 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:03:57,338 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:03:57,354 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:03:57,356 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:03:57,371 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:03:57,434 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:03:57,434 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:03:57,434 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:03:57,499 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:03:57,499 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:03:57,504 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:03:57,504 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:03:57,578 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:03:57,578 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:03:57,640 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:03:57,640 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:03:57,640 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:03:57,687 INFO [gwc.layer] - Loaded 29 tile layers in 42.60 ms
2021-12-26 18:03:57,704 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:03:57,704 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:03:57,704 INFO [storage.DefaultStorageFinder] - *** Found Java environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:03:57,704 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:03:57,750 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:03:57,804 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:03:57,813 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:03:57,813 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:03:57,813 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:03:57,813 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:03:57,813 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:03:57,813 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500,0 MB
2021-12-26 18:03:57,844 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:03:57,961 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:03:57,977 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:03:57,977 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:03:58,040 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:03:58,040 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:03:59,643 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:03:59,910 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:04:01,166 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:04:01,166 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:04:01,166 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:04:01,166 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:04:01,166 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:04:01,166 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:04:01,182 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:04:01,182 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:04:01,182 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:04:01,182 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:04:01,182 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:04:01,182 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:04:01,182 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@f777d41[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@38328799] rejected from java.util.concurrent.ThreadPoolExecutor@2a0a5865[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:04:01,182 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:04:01,197 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:04:59,630 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:04:59,677 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:04:59,739 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:04:59,739 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:04:59,747 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:04:59,755 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:04:59,771 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:04:59,771 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:04:59,771 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:04:59,771 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:04:59,771 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:04:59,771 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:04:59,771 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:04:59,787 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:04:59,787 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:04:59,787 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:04:59,787 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:04:59,787 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:04:59,787 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:04:59,787 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:04:59,787 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:04:59,787 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:04:59,787 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:04:59,787 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:04:59,787 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:04:59,787 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:04:59,787 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:04:59,787 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:05:00,125 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:05:00,940 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:05:00,949 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:05:00,956 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:05:00,956 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:05:00,956 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:05:00,956 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:05:00,956 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:05:00,956 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:05:00,956 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:05:00,972 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:05:00,972 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:05:01,098 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:05:01,129 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:05:01,129 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:05:01,129 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:05:01,129 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:05:01,129 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:05:01,129 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:05:01,129 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:05:01,129 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:05:01,144 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:05:01,144 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:05:01,144 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:05:01,150 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:05:01,150 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:05:01,150 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:05:01,333 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:05:01,333 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:05:01,333 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:05:01,333 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:05:01,333 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:05:01,333 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:05:01,333 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:05:01,349 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:05:01,349 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:05:01,350 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:05:01,350 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:05:01,350 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:05:01,350 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:05:01,350 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:05:01,364 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:05:01,364 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:05:01,364 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:05:01,364 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:05:01,364 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:05:01,364 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:05:01,364 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:05:01,364 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:05:01,364 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:05:01,380 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:05:01,396 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:05:01,396 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:05:01,396 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:05:01,396 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,396 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,396 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,396 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,396 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,396 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,396 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,396 INFO [org.geoserver] - Read catalog in 1.720 s
2021-12-26 18:05:01,411 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,411 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,411 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,411 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,411 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,411 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,411 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:05:01,490 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--69175af9:17df77cf5b2:-8000', enabled
2021-12-26 18:05:01,490 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:05:01,506 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:05:01,506 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:05:01,521 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:05:01,537 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:05:01,537 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:05:01,537 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:05:01,553 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:05:01,615 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:05:01,615 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:05:01,615 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:05:01,663 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:05:01,663 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:05:01,663 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:05:01,663 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:05:01,694 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:05:01,694 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:05:01,725 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:05:01,725 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:05:01,725 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:05:01,773 INFO [gwc.layer] - Loaded 29 tile layers in 36.64 ms
2021-12-26 18:05:01,773 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:05:01,788 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:05:01,788 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:05:01,788 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:05:01,835 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:05:01,867 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:05:01,882 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:05:01,882 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:05:01,882 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:05:01,882 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:05:01,882 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:05:01,882 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 18:05:01,914 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:05:02,023 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:05:02,039 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:05:02,039 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:05:02,102 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:05:02,102 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:05:04,076 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:05:04,431 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:05:06,189 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:05:06,189 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:05:06,189 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:05:06,189 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:05:06,189 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:05:06,189 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:05:06,205 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:05:06,205 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:05:06,205 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:05:06,205 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:05:06,205 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:05:06,205 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:05:06,205 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@6153b116[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@49d94d67] rejected from java.util.concurrent.ThreadPoolExecutor@7d7be366[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:05:06,205 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:05:06,220 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:14:55,943 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:14:56,099 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:14:56,319 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:14:56,335 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:14:56,382 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:14:56,445 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:14:56,445 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:14:56,460 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:14:56,460 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:14:56,460 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:14:56,492 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:14:56,492 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:14:56,507 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:14:56,507 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:14:56,507 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:14:56,507 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:14:56,507 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:14:56,507 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:14:56,507 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:14:56,507 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:14:56,523 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:14:56,523 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:14:56,535 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:14:56,535 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:14:56,535 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:14:56,535 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:14:56,539 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:14:57,437 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:14:59,217 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:14:59,249 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:14:59,249 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:14:59,264 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:14:59,264 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:14:59,280 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:14:59,296 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:14:59,296 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:14:59,296 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:14:59,592 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:14:59,592 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:14:59,608 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:14:59,905 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:14:59,921 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:15:00,155 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:15:00,218 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:15:00,218 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:15:00,218 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:15:00,218 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:15:00,233 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:15:00,233 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:15:00,233 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:15:00,233 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:15:00,249 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:15:00,249 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:15:00,265 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:15:00,640 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:15:00,655 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:15:00,655 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:15:00,655 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:15:00,655 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:15:00,671 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:15:00,671 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:15:00,671 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:15:00,671 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:15:00,687 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:15:00,687 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:15:00,687 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:15:00,687 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:15:00,718 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:15:00,733 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:15:00,733 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:15:00,749 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:15:00,749 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:15:00,749 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:15:00,749 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:15:00,749 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:15:00,749 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:15:00,765 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:15:00,796 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:15:00,796 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:15:00,796 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:15:00,812 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:15:00,812 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:15:00,812 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:15:00,812 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:15:00,812 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:15:00,812 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:15:00,843 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:15:00,843 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:15:00,874 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:15:00,874 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:15:00,874 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [org.geoserver] - Read catalog in 4.784 s
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:00,890 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:01,046 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-7868619a:17df7861bb6:-8000', enabled
2021-12-26 18:15:01,077 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:15:01,108 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:15:01,124 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:15:01,155 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:15:01,171 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:15:01,187 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:15:01,202 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:15:01,233 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:15:01,327 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:15:01,343 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:15:01,343 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:15:01,437 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:15:01,437 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:15:01,437 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:15:01,437 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:15:01,515 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:15:01,515 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:15:01,593 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:15:01,593 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:15:01,593 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:15:01,765 INFO [gwc.layer] - Loaded 29 tile layers in 168.0 ms
2021-12-26 18:15:01,765 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:15:01,780 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:15:01,780 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:15:01,780 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:15:01,874 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:15:01,952 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:15:01,968 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:15:01,968 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:15:01,968 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:15:01,983 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:15:01,983 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:15:01,983 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 18:15:02,030 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:15:02,233 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:15:02,249 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:15:02,265 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:15:02,374 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:15:02,374 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:15:06,437 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:15:07,328 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:15:12,289 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:15:12,292 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:15:12,293 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:15:12,297 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:15:12,297 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:15:12,298 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:15:12,301 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:15:12,302 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:15:12,303 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:15:12,304 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:15:12,304 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:15:12,304 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:15:12,317 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@7d7be366[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@6153b116] rejected from java.util.concurrent.ThreadPoolExecutor@2095e085[Shutting down, pool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:15:12,320 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:15:12,340 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:15:48,616 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:15:48,664 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:15:48,742 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:15:48,742 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:15:48,745 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:15:48,758 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:15:48,774 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:15:48,774 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:15:48,774 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:15:48,774 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:15:48,789 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:15:48,789 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:15:48,789 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:15:48,789 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:15:48,789 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:48,789 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:15:48,789 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:48,789 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:15:48,789 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:48,789 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:15:48,805 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:48,805 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:15:48,805 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:48,805 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:15:48,805 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:48,805 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:15:48,805 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:48,805 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:15:49,151 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:15:49,967 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:15:49,983 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:15:49,983 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:15:50,187 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:15:50,187 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:15:50,187 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:15:50,187 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:15:50,187 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:15:50,187 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:15:50,202 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:15:50,202 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:15:50,360 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:15:50,391 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:15:50,391 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:15:50,391 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:15:50,391 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:15:50,391 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:15:50,391 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:15:50,407 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:15:50,407 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:15:50,407 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:15:50,407 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:15:50,407 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:15:50,407 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:15:50,407 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:15:50,595 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:15:50,595 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:15:50,595 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:15:50,595 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:15:50,595 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:15:50,611 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:15:50,611 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:15:50,611 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:15:50,611 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:15:50,611 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:15:50,611 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:15:50,611 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:15:50,611 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:15:50,626 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:15:50,626 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:15:50,626 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:15:50,626 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:15:50,642 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:15:50,642 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:15:50,642 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:15:50,642 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:15:50,650 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:15:50,650 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:15:50,650 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:15:50,658 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:15:50,658 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:15:50,658 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:15:50,658 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:15:50,658 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:15:50,658 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:15:50,658 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:15:50,658 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:15:50,658 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:15:50,674 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:15:50,674 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:15:50,674 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:15:50,674 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:15:50,689 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [org.geoserver] - Read catalog in 2.018 s
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,689 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:15:50,768 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-294c91fd:17df786ddf0:-8000', enabled
2021-12-26 18:15:50,768 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:15:50,784 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:15:50,799 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:15:50,799 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:15:50,815 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:15:50,815 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:15:50,815 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:15:50,830 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:15:50,893 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:15:50,893 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:15:50,893 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:15:50,925 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:15:50,925 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:15:50,925 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:15:50,925 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:15:50,972 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:15:50,972 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:15:51,006 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:15:51,006 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:15:51,006 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:15:51,037 INFO [gwc.layer] - Loaded 29 tile layers in 32.76 ms
2021-12-26 18:15:51,053 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:15:51,053 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:15:51,053 INFO [storage.DefaultStorageFinder] - *** Found Java environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:15:51,053 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:15:51,115 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:15:51,163 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:15:51,163 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:15:51,163 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:15:51,178 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:15:51,178 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:15:51,178 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:15:51,178 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500,0 MB
2021-12-26 18:15:51,210 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:15:51,367 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:15:51,367 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:15:51,382 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:15:51,461 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:15:51,461 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:15:53,111 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:15:53,378 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:15:54,727 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:15:54,727 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:15:54,727 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:15:54,727 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:15:54,727 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:15:54,727 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:15:54,727 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:15:54,727 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:15:54,727 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:15:54,727 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:15:54,727 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:15:54,743 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:15:54,743 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@f777d41[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@38328799] rejected from java.util.concurrent.ThreadPoolExecutor@2a0a5865[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:15:54,743 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:15:54,759 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:16:41,479 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:16:41,541 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:16:41,599 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:16:41,599 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:16:41,599 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:16:41,599 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:16:41,599 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:16:41,614 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:16:41,630 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:16:41,645 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:16:41,645 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:16:41,645 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:16:41,645 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:16:41,645 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:16:41,661 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:16:41,661 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:16:41,661 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:16:41,661 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:16:41,661 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:16:41,661 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:16:41,661 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:16:41,661 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:16:41,953 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:16:42,720 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:16:42,731 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:16:42,732 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:16:42,879 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:16:42,879 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:16:42,879 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:16:42,879 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:16:42,879 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:16:42,895 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:16:42,895 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:16:42,895 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:16:43,052 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:16:43,081 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:16:43,082 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:16:43,086 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:16:43,087 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:16:43,090 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:16:43,091 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:16:43,095 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:16:43,097 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:16:43,100 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:16:43,101 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:16:43,102 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:16:43,106 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:16:43,107 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:16:43,112 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:16:43,321 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:16:43,323 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:16:43,325 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:16:43,325 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:16:43,326 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:16:43,327 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:16:43,327 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:16:43,328 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:16:43,329 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:16:43,330 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:16:43,332 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:16:43,332 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:16:43,332 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:16:43,332 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:16:43,332 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:16:43,332 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:16:43,332 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:16:43,332 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:16:43,348 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:16:43,349 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:16:43,349 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:16:43,349 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:16:43,349 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:16:43,349 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:16:43,349 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:16:43,349 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:16:43,364 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:16:43,364 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:16:43,364 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:16:43,364 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:16:43,364 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:16:43,364 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:16:43,364 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:16:43,364 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:16:43,379 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:16:43,379 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:16:43,379 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [org.geoserver] - Read catalog in 1.846 s
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,379 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:16:43,478 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--798c27ea:17df787abd5:-8000', enabled
2021-12-26 18:16:43,486 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:16:43,496 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:16:43,498 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:16:43,513 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:16:43,513 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:16:43,529 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:16:43,529 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:16:43,561 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:16:43,639 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:16:43,639 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:16:43,639 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:16:43,670 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:16:43,670 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:16:43,670 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:16:43,670 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:16:43,726 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:16:43,730 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:16:43,764 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:16:43,764 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:16:43,764 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:16:43,811 INFO [gwc.layer] - Loaded 29 tile layers in 43.07 ms
2021-12-26 18:16:43,826 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:16:43,826 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:16:43,842 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:16:43,842 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:16:43,917 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:16:43,984 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:16:43,984 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:16:43,984 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:16:44,000 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:16:44,000 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:16:44,000 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:16:44,000 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 18:16:44,031 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:16:44,173 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:16:44,188 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:16:44,188 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:16:44,266 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:16:44,266 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:16:46,155 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:16:46,446 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:16:48,316 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:16:48,318 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:16:48,318 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:16:48,319 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:16:48,319 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:16:48,319 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:16:48,322 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:16:48,322 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:16:48,323 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:16:48,324 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:16:48,324 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:16:48,325 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:16:48,333 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@7d7be366[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@6153b116] rejected from java.util.concurrent.ThreadPoolExecutor@2095e085[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:16:48,335 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:16:48,343 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:17:02,761 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:17:02,808 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:17:02,870 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:17:02,870 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:17:02,870 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:17:02,870 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:17:02,870 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:17:02,870 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:17:02,870 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:17:02,870 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:17:02,870 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:17:02,885 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:17:02,885 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:17:02,886 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:17:02,902 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:17:02,902 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:17:02,918 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:17:02,918 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:17:02,918 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:17:02,918 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:17:02,918 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:02,918 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:17:02,918 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:02,918 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:17:02,933 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:02,933 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:17:02,933 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:02,933 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:17:02,933 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:02,933 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:17:02,933 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:02,933 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:17:02,933 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:02,933 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:17:02,933 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:17:02,933 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:17:02,933 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:17:03,263 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:17:03,941 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:17:03,957 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:17:03,957 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:17:03,957 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:17:03,957 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:17:03,973 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:17:04,114 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:17:04,114 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:17:04,114 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:17:04,130 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:17:04,130 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:17:04,259 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:17:04,274 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:17:04,288 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:17:04,290 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:17:04,290 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:17:04,290 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:17:04,290 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:17:04,290 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:17:04,290 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:17:04,290 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:17:04,290 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:17:04,306 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:17:04,306 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:17:04,306 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:17:04,489 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:17:04,489 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:17:04,489 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:17:04,501 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:17:04,501 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:17:04,517 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:17:04,517 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:17:04,517 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:17:04,517 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:17:04,533 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:17:04,533 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:17:04,533 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:17:04,533 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:17:04,533 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:17:04,548 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:17:04,548 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:17:04,548 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:17:04,548 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:17:04,564 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:17:04,564 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:17:04,564 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:17:04,564 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:17:04,564 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:17:04,564 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:17:04,564 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:17:04,564 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:17:04,580 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:17:04,589 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:17:04,589 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:17:04,589 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,589 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,589 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,589 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,589 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,589 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,589 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,596 INFO [org.geoserver] - Read catalog in 1.774 s
2021-12-26 18:17:04,596 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,596 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,596 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,596 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,596 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,596 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,596 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:17:04,658 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--2d477653:17df787fe92:-8000', enabled
2021-12-26 18:17:04,674 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:17:04,674 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:17:04,689 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:17:04,705 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:17:04,705 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:17:04,705 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:17:04,705 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:17:04,737 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:17:04,789 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:17:04,789 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:17:04,789 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:17:04,820 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:17:04,820 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:17:04,820 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:17:04,820 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:17:04,852 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:17:04,852 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:17:04,889 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:17:04,889 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:17:04,889 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:17:04,915 INFO [gwc.layer] - Loaded 29 tile layers in 30.74 ms
2021-12-26 18:17:04,930 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:17:04,930 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:17:04,930 INFO [storage.DefaultStorageFinder] - *** Found Java environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:17:04,930 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:17:04,993 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:17:05,040 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:17:05,040 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:17:05,040 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:17:05,055 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:17:05,055 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:17:05,055 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:17:05,055 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500,0 MB
2021-12-26 18:17:05,090 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:17:05,228 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:17:05,244 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:17:05,244 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:17:05,327 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:17:05,327 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:17:06,997 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:17:07,295 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:17:08,644 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:17:08,644 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:17:08,644 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:17:08,660 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:17:08,660 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:17:08,660 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:17:08,660 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:17:08,660 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:17:08,660 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:17:08,660 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:17:08,660 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:17:08,660 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:17:08,660 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@3f92977a[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@2a0a5865] rejected from java.util.concurrent.ThreadPoolExecutor@1330d15e[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:17:08,660 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:17:08,675 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:24:11,429 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:24:11,489 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:24:11,560 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:24:11,560 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:24:11,561 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:24:11,561 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:24:11,562 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:24:11,563 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:24:11,564 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:24:11,565 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:24:11,565 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:24:11,566 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:24:11,566 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:24:11,567 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:24:11,568 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:24:11,569 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:24:11,570 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:24:11,572 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:24:11,572 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:24:11,573 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:24:11,573 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:24:11,574 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:24:11,574 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:24:11,590 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:24:11,602 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:24:11,605 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:24:11,606 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:24:11,607 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:24:11,608 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:24:11,609 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:24:11,609 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:24:11,612 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:24:11,617 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:11,618 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:24:11,618 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:11,618 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:24:11,619 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:11,619 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:24:11,620 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:11,620 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:24:11,621 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:11,621 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:24:11,622 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:11,622 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:24:11,622 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:11,623 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:24:11,951 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:24:13,037 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:24:13,048 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:24:13,050 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:24:13,053 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:24:13,055 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:24:13,056 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:24:13,062 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:24:13,063 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:24:13,064 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:24:13,068 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:24:13,069 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:24:13,214 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:24:13,245 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:24:13,245 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:24:13,248 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:24:13,250 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:24:13,253 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:24:13,254 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:24:13,257 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:24:13,258 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:24:13,261 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:24:13,262 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:24:13,263 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:24:13,268 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:24:13,269 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:24:13,274 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:24:13,462 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:24:13,465 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:24:13,466 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:24:13,467 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:24:13,467 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:24:13,468 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:24:13,469 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:24:13,469 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:24:13,470 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:24:13,471 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:24:13,471 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:24:13,474 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:24:13,477 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:24:13,480 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:24:13,483 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:24:13,484 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:24:13,485 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:24:13,486 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:24:13,487 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:24:13,488 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:24:13,489 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:24:13,490 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:24:13,494 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:24:13,497 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:24:13,498 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:24:13,500 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:24:13,503 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:24:13,504 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:24:13,505 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:24:13,506 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:24:13,508 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:24:13,508 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:24:13,510 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:24:13,510 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:24:13,521 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:24:13,522 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:24:13,524 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:24:13,525 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,525 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,525 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,525 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,525 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,525 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,525 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,527 INFO [org.geoserver] - Read catalog in 2.037 s
2021-12-26 18:24:13,528 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,528 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,528 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,528 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,528 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,528 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,529 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:24:13,615 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-756cd424:17df78e8a2e:-8000', enabled
2021-12-26 18:24:13,622 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:24:13,632 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:24:13,646 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:24:13,659 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:24:13,662 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:24:13,666 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:24:13,670 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:24:13,690 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:24:13,754 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:24:13,754 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:24:13,754 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:24:13,788 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:24:13,788 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1.a: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:24:13,788 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:24:13,788 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:24:13,831 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:24:13,832 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:24:13,868 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:24:13,868 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:24:13,868 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:24:13,902 INFO [gwc.layer] - Loaded 29 tile layers in 32.30 ms
2021-12-26 18:24:13,910 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:24:13,917 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:24:13,917 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:24:13,917 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:24:13,970 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:24:14,022 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:24:14,027 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:24:14,029 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:24:14,036 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:24:14,036 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:24:14,036 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:24:14,038 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 18:24:14,062 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:24:14,186 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:24:14,198 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:24:14,200 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:24:14,287 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:24:14,287 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:24:16,437 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:24:16,743 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:24:18,312 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:24:18,312 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:24:18,312 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:24:18,312 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:24:18,312 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:24:18,312 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:24:18,312 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:24:18,312 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:24:18,312 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:24:18,312 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:24:18,312 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:24:18,312 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:24:18,312 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@6153b116[Not completed, task = org.geowebcache.storage.blobstore.memory.MemoryBlobStore$BlobStoreTask@49d94d67] rejected from java.util.concurrent.ThreadPoolExecutor@7d7be366[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:24:18,327 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:24:18,335 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy27.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy25.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:33:07,657 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:33:07,747 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:33:07,843 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:33:07,844 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:33:07,845 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:33:07,845 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:33:07,846 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:33:07,847 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:33:07,848 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:33:07,849 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:33:07,849 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:33:07,850 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:33:07,851 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:33:07,852 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:33:07,852 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:33:07,852 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:33:07,852 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:33:07,856 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:33:07,857 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:33:07,858 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:33:07,858 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:33:07,859 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:33:07,859 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:33:07,864 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:33:07,878 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:33:07,880 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:33:07,884 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:33:07,885 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:33:07,886 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:33:07,891 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:07,891 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:33:07,892 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:07,892 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:33:07,892 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:07,893 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:33:07,893 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:07,893 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:33:07,893 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:07,893 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:33:07,893 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:07,893 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:33:07,893 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:07,897 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:33:07,897 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:33:07,898 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:33:07,899 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:33:08,453 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:33:09,798 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:33:09,810 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:33:09,815 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:33:09,821 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:33:09,823 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:33:09,824 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:33:09,830 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:33:09,831 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:33:09,831 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:33:09,839 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:33:09,839 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:33:10,018 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:33:10,053 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:33:10,053 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:33:10,059 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:33:10,061 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:33:10,064 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:33:10,065 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:33:10,071 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:33:10,073 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:33:10,078 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:33:10,079 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:33:10,080 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:33:10,085 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:33:10,086 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:33:10,679 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:33:10,684 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:33:10,685 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:33:10,686 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:33:10,686 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:33:10,686 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:33:10,689 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:33:10,690 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:33:10,691 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:33:10,691 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:33:10,692 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:33:10,693 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:33:10,700 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:33:10,705 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:33:10,714 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:33:10,721 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:33:10,722 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:33:10,725 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:33:10,726 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:33:10,727 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:33:10,728 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:33:10,728 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:33:10,731 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:33:10,734 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:33:10,740 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:33:10,742 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:33:10,746 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:33:10,751 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:33:10,752 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:33:10,753 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:33:10,754 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:33:10,756 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:33:10,757 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:33:10,760 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:33:10,760 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:33:10,772 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:33:10,775 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:33:10,777 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:33:10,778 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,778 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,778 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,778 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,778 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,778 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,778 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,781 INFO [org.geoserver] - Read catalog in 3.031 s
2021-12-26 18:33:10,784 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,784 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,784 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,784 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,784 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,784 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,784 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:33:10,899 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--42b98aed:17df796bcf3:-8000', enabled
2021-12-26 18:33:10,907 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:33:10,921 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:33:10,936 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:33:10,954 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:33:10,960 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:33:10,963 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:33:10,969 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:33:10,997 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:33:11,107 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:33:11,108 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:33:11,108 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:33:11,157 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:33:11,157 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:33:11,157 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:33:11,157 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:33:11,232 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:33:11,234 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:33:11,295 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:33:11,295 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:33:11,295 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:33:11,353 INFO [gwc.layer] - Loaded 29 tile layers in 59.25 ms
2021-12-26 18:33:11,370 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:33:11,380 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:33:11,380 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:33:11,380 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:33:11,483 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:33:11,579 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:33:11,589 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:33:11,589 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:33:11,602 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:33:11,603 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:33:11,603 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:33:11,606 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 18:33:11,650 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:33:11,888 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:33:11,907 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:33:11,913 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:33:12,039 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:33:12,039 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:33:14,276 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:33:14,749 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:33:17,185 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:33:17,189 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:33:17,190 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:33:17,192 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:33:17,192 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:33:17,192 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:33:17,196 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:33:17,196 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:33:17,197 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:33:17,198 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:33:17,198 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:33:17,199 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:33:17,244 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@30d3f583 rejected from java.util.concurrent.ThreadPoolExecutor@3344c1d7[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:33:17,247 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:33:17,273 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(Unknown Source)
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)
	at java.util.stream.ReferencePipeline.collect(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:34:28,176 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:34:28,223 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:34:28,333 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:34:28,333 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:34:28,333 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:34:28,333 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:34:28,348 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:34:28,364 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:34:28,395 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:34:28,411 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:34:28,411 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:34:28,411 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:34:28,411 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:34:28,426 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:28,426 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:34:28,426 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:28,426 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:34:28,426 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:28,426 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:34:28,426 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:28,426 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:34:28,426 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:28,426 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:34:28,442 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:28,442 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:34:28,442 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:28,442 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:34:28,442 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:34:28,442 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:34:28,442 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:34:29,020 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:34:31,099 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:34:31,114 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:34:31,114 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:34:31,146 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:34:31,146 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:34:31,146 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:34:31,161 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:34:31,161 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:34:31,161 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:34:31,192 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:34:31,192 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:34:31,380 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:34:31,442 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:34:31,442 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:34:31,442 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:34:31,442 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:34:31,458 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:34:31,458 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:34:31,458 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:34:31,458 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:34:31,474 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:34:31,474 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:34:31,474 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:34:31,505 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:34:31,505 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:34:31,521 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:34:32,198 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:34:32,230 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:34:32,230 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:34:32,230 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:34:32,230 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:34:32,230 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:34:32,230 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:34:32,230 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:34:32,230 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:34:32,245 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:34:32,245 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:34:32,245 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:34:32,261 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:34:32,261 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:34:32,292 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:34:32,292 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:34:32,292 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:34:32,292 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:34:32,292 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:34:32,292 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:34:32,292 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:34:32,292 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:34:32,308 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:34:32,339 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:34:32,339 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:34:32,339 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:34:32,355 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:34:32,355 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:34:32,370 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:34:32,370 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:34:32,370 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:34:32,370 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:34:32,370 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:34:32,370 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:34:32,386 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:34:32,402 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:34:32,402 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [org.geoserver] - Read catalog in 4.169 s
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,402 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:34:32,542 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-48d22995:17df797fbde:-8000', enabled
2021-12-26 18:34:32,808 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:34:32,839 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:34:32,855 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:34:32,870 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:34:32,886 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:34:32,886 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:34:32,902 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:34:32,933 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:34:33,011 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:34:33,011 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:34:33,011 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:34:33,073 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:34:33,073 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:34:33,073 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:34:33,073 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:34:33,136 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:34:33,136 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:34:33,183 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:34:33,183 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:34:33,183 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:34:33,323 INFO [gwc.layer] - Loaded 29 tile layers in 136.4 ms
2021-12-26 18:34:33,339 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:34:33,339 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:34:33,339 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:34:33,339 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:34:33,417 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:34:33,511 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:34:33,511 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:34:33,511 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:34:33,527 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:34:33,527 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:34:33,527 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:34:33,527 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 18:34:33,573 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:34:33,808 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:34:33,823 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:34:33,823 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:34:33,964 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:34:33,964 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:34:36,668 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:34:37,152 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:34:41,092 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:34:41,092 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:34:41,107 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:34:41,107 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:34:41,107 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:34:41,107 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:34:41,107 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:34:41,107 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:34:41,107 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:34:41,107 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:34:41,107 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:34:41,107 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:34:41,123 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@570089c4 rejected from java.util.concurrent.ThreadPoolExecutor@409df37d[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:34:41,123 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:34:41,138 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/Program%20Files/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(Unknown Source)
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)
	at java.util.stream.ReferencePipeline.collect(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:37:11,894 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:37:11,964 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:37:12,034 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:37:12,035 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:37:12,035 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:37:12,036 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:37:12,036 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:37:12,036 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:37:12,037 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:37:12,037 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:37:12,037 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:37:12,038 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:37:12,038 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:37:12,038 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:37:12,039 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:37:12,039 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:37:12,040 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:37:12,041 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:37:12,041 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:37:12,041 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:37:12,042 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:37:12,042 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:37:12,042 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:37:12,046 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:37:12,058 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:37:12,061 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:37:12,063 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:37:12,064 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:37:12,065 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:37:12,066 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:37:12,067 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:37:12,070 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:37:12,078 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:12,078 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:37:12,079 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:12,080 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:37:12,081 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:12,081 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:37:12,082 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:12,083 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:37:12,083 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:12,084 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:37:12,084 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:12,085 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:37:12,085 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:12,086 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:37:12,366 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:37:13,368 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:37:13,374 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:37:13,374 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:37:13,390 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:37:13,390 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:37:13,390 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:37:13,390 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:37:13,390 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:37:13,390 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:37:13,644 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:37:13,646 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:37:13,839 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:37:13,854 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:37:13,854 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:37:13,854 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:37:13,870 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:37:13,870 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:37:13,870 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:37:13,870 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:37:13,870 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:37:13,890 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:37:13,891 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:37:13,892 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:37:13,895 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:37:13,896 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:37:13,901 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:37:14,460 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:37:14,464 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:37:14,465 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:37:14,465 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:37:14,466 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:37:14,467 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:37:14,468 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:37:14,469 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:37:14,469 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:37:14,470 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:37:14,472 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:37:14,478 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:37:14,480 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:37:14,485 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:37:14,489 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:37:14,490 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:37:14,492 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:37:14,493 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:37:14,494 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:37:14,495 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:37:14,496 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:37:14,497 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:37:14,501 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:37:14,507 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:37:14,508 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:37:14,511 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:37:14,515 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:37:14,516 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:37:14,518 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:37:14,519 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:37:14,522 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:37:14,522 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:37:14,524 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:37:14,525 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:37:14,538 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:37:14,540 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:37:14,541 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:37:14,542 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,542 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,542 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,542 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,542 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,543 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,543 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,544 INFO [org.geoserver] - Read catalog in 2.578 s
2021-12-26 18:37:14,546 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,546 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,546 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,546 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,546 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,546 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,546 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:14,650 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--62ddfcf9:17df79a751a:-8000', enabled
2021-12-26 18:37:14,657 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:37:14,669 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:37:14,682 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:37:14,698 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:37:14,702 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:37:14,707 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:37:14,712 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:37:14,740 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:37:14,838 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:37:14,839 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:37:14,839 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:37:14,881 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:37:14,881 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:37:14,881 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:37:14,881 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:37:14,938 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:37:14,939 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:37:14,979 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:37:14,980 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:37:14,980 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:37:15,016 INFO [gwc.layer] - Loaded 29 tile layers in 35.35 ms
2021-12-26 18:37:15,024 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:37:15,032 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:37:15,032 INFO [storage.DefaultStorageFinder] - *** Found System environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:37:15,032 INFO [storage.DefaultStorageFinder] - *****************************************************************************************************************************
2021-12-26 18:37:15,098 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:37:15,156 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:37:15,162 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:37:15,163 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:37:15,169 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:37:15,171 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:37:15,171 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:37:15,172 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500.0 MB
2021-12-26 18:37:15,199 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:37:15,380 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:37:15,395 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:37:15,398 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:37:15,502 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:37:15,502 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:37:18,183 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:37:18,587 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:37:20,579 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:37:20,582 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:37:20,583 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:37:20,584 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:37:20,584 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:37:20,585 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:37:20,587 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:37:20,587 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:37:20,588 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:37:20,589 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:37:20,589 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:37:20,590 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:37:20,594 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@261c5d1f rejected from java.util.concurrent.ThreadPoolExecutor@570089c4[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:37:20,594 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:37:20,609 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(Unknown Source)
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)
	at java.util.stream.ReferencePipeline.collect(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:37:56,340 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:37:56,403 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:37:56,482 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:37:56,498 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:37:56,498 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:37:56,498 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:37:56,513 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:37:56,513 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:37:56,513 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:37:56,529 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:37:56,529 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:37:56,529 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:37:56,529 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:37:56,529 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:37:56,529 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:56,529 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:37:56,529 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:56,544 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:37:56,544 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:56,548 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:37:56,548 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:56,548 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:37:56,548 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:56,548 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:37:56,548 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:56,548 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:37:56,548 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:56,548 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:37:56,874 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:37:57,762 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:37:57,762 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:37:57,762 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:37:57,778 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:37:57,778 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:37:57,778 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:37:58,051 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:37:58,062 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:37:58,062 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:37:58,062 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:37:58,062 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:37:58,187 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:37:58,218 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:37:58,218 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:37:58,218 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:37:58,218 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:37:58,234 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:37:58,234 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:37:58,234 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:37:58,234 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:37:58,234 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:37:58,234 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:37:58,234 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:37:58,252 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:37:58,252 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:37:58,252 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:37:58,768 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:37:58,784 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:37:58,799 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:37:58,799 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:37:58,799 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:37:58,799 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:37:58,799 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:37:58,799 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:37:58,799 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:37:58,815 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:37:58,815 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:37:58,815 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:37:58,815 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:37:58,815 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:37:58,815 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:37:58,831 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:37:58,831 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:37:58,831 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:37:58,831 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:37:58,831 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:37:58,831 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:37:58,831 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:37:58,831 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:37:58,831 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:37:58,853 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:37:58,853 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:37:58,853 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:37:58,853 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,853 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,853 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,853 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,853 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,853 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,862 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,862 INFO [org.geoserver] - Read catalog in 2.450 s
2021-12-26 18:37:58,862 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,862 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,862 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,862 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,862 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,862 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,862 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:37:58,940 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-4e7ee301:17df79b221c:-8000', enabled
2021-12-26 18:37:58,956 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:37:58,956 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:37:58,972 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:37:58,988 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:37:59,003 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:37:59,003 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:37:59,003 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:37:59,034 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:37:59,129 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:37:59,129 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:37:59,129 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:37:59,176 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:37:59,176 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:37:59,176 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:37:59,176 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:37:59,238 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:37:59,238 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:37:59,285 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:37:59,285 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:37:59,285 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:37:59,332 INFO [gwc.layer] - Loaded 29 tile layers in 38.57 ms
2021-12-26 18:37:59,348 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:37:59,354 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:37:59,354 INFO [storage.DefaultStorageFinder] - *** Found Java environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:37:59,354 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:37:59,426 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:37:59,490 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:37:59,490 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:37:59,505 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:37:59,505 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:37:59,505 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:37:59,505 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:37:59,505 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500,0 MB
2021-12-26 18:37:59,537 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:37:59,710 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:37:59,725 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:37:59,725 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:37:59,804 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:37:59,804 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:38:01,674 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:38:02,099 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:38:04,185 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:38:04,216 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:38:04,216 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:38:04,232 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:38:04,232 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:38:04,232 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:38:04,232 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:38:04,232 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:38:04,232 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:38:04,232 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:38:04,232 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:38:04,232 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:38:04,247 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@109f95b1 rejected from java.util.concurrent.ThreadPoolExecutor@4d20cbb5[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:38:04,247 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:38:04,265 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(Unknown Source)
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)
	at java.util.stream.ReferencePipeline.collect(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
2021-12-26 18:39:02,195 INFO [org.geoserver] - GeoServer configuration lock is enabled
2021-12-26 18:39:02,242 INFO [org.geoserver] - Loading catalog...
2021-12-26 18:39:02,289 INFO [org.geoserver] - Loaded style 'burg'
2021-12-26 18:39:02,289 INFO [org.geoserver] - Loaded style 'cite_lakes'
2021-12-26 18:39:02,289 INFO [org.geoserver] - Loaded style 'capitals'
2021-12-26 18:39:02,289 INFO [org.geoserver] - Loaded style 'dem'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'grass'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'giant_polygon'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'generic'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'line'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'green'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'polygon'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'poly_landmarks'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'poi'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'population'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'pophatch'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'raster'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'simple_roads'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'restricted'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'rain'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'point'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'simple_streams'
2021-12-26 18:39:02,297 INFO [org.geoserver] - Loaded style 'tiger_roads'
2021-12-26 18:39:02,305 INFO [org.geoserver] - Loaded default workspace task5
2021-12-26 18:39:02,305 INFO [org.geoserver] - Loaded workspace 'cite'
2021-12-26 18:39:02,305 INFO [org.geoserver] - Loaded workspace 'sde'
2021-12-26 18:39:02,305 INFO [org.geoserver] - Loaded workspace 'nurc'
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded workspace 'it.geosolutions'
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded workspace 'task5'
2021-12-26 18:39:02,320 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded style 'lakes'
2021-12-26 18:39:02,320 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded style 'map'
2021-12-26 18:39:02,320 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded style 'farmfields'
2021-12-26 18:39:02,320 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded style 'postboxes'
2021-12-26 18:39:02,320 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded style 'trees'
2021-12-26 18:39:02,320 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded style 'residences'
2021-12-26 18:39:02,320 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded style 'road'
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded workspace 'tiger'
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded workspace 'topp'
2021-12-26 18:39:02,320 INFO [org.geoserver] - Loaded workspace 'sf'
2021-12-26 18:39:02,556 INFO [org.geoserver] - Loaded coverage store 'arcGridSample', enabled
2021-12-26 18:39:03,214 INFO [org.geoserver] - Loaded coverage 'Arc_Sample', enabled
2021-12-26 18:39:03,230 INFO [org.geoserver] - Loaded layer 'Arc_Sample'
2021-12-26 18:39:03,230 INFO [org.geoserver] - Loaded coverage store 'img_sample2', enabled
2021-12-26 18:39:03,355 INFO [org.geoserver] - Loaded coverage 'Pk50095', enabled
2021-12-26 18:39:03,355 INFO [org.geoserver] - Loaded layer 'Pk50095'
2021-12-26 18:39:03,355 INFO [org.geoserver] - Loaded coverage store 'mosaic', enabled
2021-12-26 18:39:03,355 INFO [org.geoserver] - Loaded coverage 'mosaic', enabled
2021-12-26 18:39:03,355 INFO [org.geoserver] - Loaded layer 'mosaic'
2021-12-26 18:39:03,355 INFO [org.geoserver] - Loaded coverage store 'worldImageSample', enabled
2021-12-26 18:39:03,371 INFO [org.geoserver] - Loaded coverage 'Img_Sample', enabled
2021-12-26 18:39:03,371 INFO [org.geoserver] - Loaded layer 'Img_Sample'
2021-12-26 18:39:03,450 INFO [org.geoserver] - Loaded data store 'sf', enabled
2021-12-26 18:39:03,481 INFO [org.geoserver] - Loaded feature type 'archsites', enabled
2021-12-26 18:39:03,481 INFO [org.geoserver] - Loaded layer 'archsites'
2021-12-26 18:39:03,481 INFO [org.geoserver] - Loaded feature type 'bugsites', enabled
2021-12-26 18:39:03,481 INFO [org.geoserver] - Loaded layer 'bugsites'
2021-12-26 18:39:03,481 INFO [org.geoserver] - Loaded feature type 'restricted', enabled
2021-12-26 18:39:03,481 INFO [org.geoserver] - Loaded layer 'restricted'
2021-12-26 18:39:03,496 INFO [org.geoserver] - Loaded feature type 'roads', enabled
2021-12-26 18:39:03,500 INFO [org.geoserver] - Loaded layer 'roads'
2021-12-26 18:39:03,500 INFO [org.geoserver] - Loaded feature type 'streams', enabled
2021-12-26 18:39:03,500 INFO [org.geoserver] - Loaded layer 'streams'
2021-12-26 18:39:03,500 INFO [org.geoserver] - Loaded coverage store 'sfdem', enabled
2021-12-26 18:39:03,500 INFO [org.geoserver] - Loaded coverage 'sfdem', enabled
2021-12-26 18:39:03,500 INFO [org.geoserver] - Loaded layer 'sfdem'
2021-12-26 18:39:03,512 WARN [org.geoserver] - Failed to load coverage store 'coveragestore.xml'
java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStoreByName(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStoreByName(CatalogImpl.java:290)
	at org.geoserver.catalog.impl.CatalogImpl.validate(CatalogImpl.java:203)
	at org.geoserver.catalog.impl.CatalogImpl.add(CatalogImpl.java:175)
	at org.geoserver.config.GeoServerLoader.loadCoverageStore(GeoServerLoader.java:747)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:633)
	at org.geoserver.config.GeoServerLoader.readCatalog(GeoServerLoader.java:449)
	at org.geoserver.config.DefaultGeoServerLoader.loadCatalog(DefaultGeoServerLoader.java:37)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitializationCatalog(GeoServerLoader.java:329)
	at org.geoserver.config.GeoServerLoader.postProcessBeforeInitialization(GeoServerLoader.java:280)
	at org.geoserver.config.GeoServerLoaderProxy.postProcessBeforeInitialization(GeoServerLoaderProxy.java:60)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:413)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1761)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1672)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1424)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:591)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:303)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:110)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:676)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:188)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 130 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStoreByName(IsolatedCatalogFacade.java:86)
	... 135 more
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded data store 'Task5Database', enabled
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded feature type 'farmfields', enabled
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded layer 'farmfields'
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded feature type 'lakes', enabled
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded layer 'lakes'
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded feature type 'postboxes', enabled
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded layer 'postboxes'
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded feature type 'residences', enabled
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded layer 'residences'
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded feature type 'roadsmerged', enabled
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded layer 'roadsmerged'
2021-12-26 18:39:03,951 INFO [org.geoserver] - Loaded feature type 'trees', enabled
2021-12-26 18:39:03,966 INFO [org.geoserver] - Loaded layer 'trees'
2021-12-26 18:39:03,966 INFO [org.geoserver] - Loaded data store 'nyc', enabled
2021-12-26 18:39:03,966 INFO [org.geoserver] - Loaded feature type 'giant_polygon', enabled
2021-12-26 18:39:03,966 INFO [org.geoserver] - Loaded layer 'giant_polygon'
2021-12-26 18:39:03,966 INFO [org.geoserver] - Loaded feature type 'poi', enabled
2021-12-26 18:39:03,966 INFO [org.geoserver] - Loaded layer 'poi'
2021-12-26 18:39:03,966 INFO [org.geoserver] - Loaded feature type 'poly_landmarks', enabled
2021-12-26 18:39:03,966 INFO [org.geoserver] - Loaded layer 'poly_landmarks'
2021-12-26 18:39:03,982 INFO [org.geoserver] - Loaded feature type 'tiger_roads', enabled
2021-12-26 18:39:03,982 INFO [org.geoserver] - Loaded layer 'tiger_roads'
2021-12-26 18:39:03,982 INFO [org.geoserver] - Loaded data store 'states_shapefile', enabled
2021-12-26 18:39:03,982 INFO [org.geoserver] - Loaded feature type 'states', enabled
2021-12-26 18:39:03,982 INFO [org.geoserver] - Loaded layer 'states'
2021-12-26 18:39:03,982 INFO [org.geoserver] - Loaded data store 'taz_shapes', enabled
2021-12-26 18:39:03,998 INFO [org.geoserver] - Loaded feature type 'tasmania_cities', enabled
2021-12-26 18:39:03,998 INFO [org.geoserver] - Loaded layer 'tasmania_cities'
2021-12-26 18:39:03,998 INFO [org.geoserver] - Loaded feature type 'tasmania_roads', enabled
2021-12-26 18:39:04,001 INFO [org.geoserver] - Loaded layer 'tasmania_roads'
2021-12-26 18:39:04,001 INFO [org.geoserver] - Loaded feature type 'tasmania_water_bodies', enabled
2021-12-26 18:39:04,001 INFO [org.geoserver] - Loaded layer 'tasmania_water_bodies'
2021-12-26 18:39:04,001 INFO [org.geoserver] - Loaded feature type 'tasmania_state_boundaries', enabled
2021-12-26 18:39:04,001 INFO [org.geoserver] - Loaded layer 'tasmania_state_boundaries'
2021-12-26 18:39:04,015 INFO [org.geoserver] - Loaded layer group 'spearfish'
2021-12-26 18:39:04,015 INFO [org.geoserver] - Loaded layer group 'tasmania'
2021-12-26 18:39:04,015 INFO [org.geoserver] - Loaded layer group 'tiger-ny'
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [org.geoserver] - Read catalog in 1.775 s
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "trees". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "road". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "farmfields". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "map". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "postboxes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "lakes". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,015 INFO [catalog.impl] - Failed to resolve workspace for style "residences". This means the workspace has not yet been added to the catalog, keep the proxy around
2021-12-26 18:39:04,078 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl-2af5dda1:17df79c208e:-8000', enabled
2021-12-26 18:39:04,078 INFO [org.geoserver] - Loaded service 'wcs', enabled
2021-12-26 18:39:04,093 INFO [org.geoserver] - Loaded service 'wfs', enabled
2021-12-26 18:39:04,109 INFO [org.geoserver] - Loaded service 'wms', enabled
2021-12-26 18:39:04,109 INFO [org.geoserver] - Loaded service 'WMTSInfoImpl--5a34e290:17df6542867:-7fb7', enabled
2021-12-26 18:39:04,125 INFO [org.geoserver] - Loaded service 'WCSInfoImpl--5a34e290:17df6542867:-7fb6', enabled
2021-12-26 18:39:04,125 INFO [org.geoserver] - Loaded service 'WFSInfoImpl--5a34e290:17df6542867:-7fb5', enabled
2021-12-26 18:39:04,125 INFO [org.geoserver] - Loaded service 'WMSInfoImpl--5a34e290:17df6542867:-7fb4', enabled
2021-12-26 18:39:04,141 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:39:04,219 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:39:04,219 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:39:04,219 INFO [config.GeoserverXMLResourceProvider] - Found configuration file in gwc
2021-12-26 18:39:04,250 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:39:04,250 WARN [config.XMLConfiguration] - *** GWC configuration validation error: cvc-elt.1: Cannot find the declaration of element 'gwcConfiguration'.
2021-12-26 18:39:04,250 WARN [config.XMLConfiguration] - *** Will try to use configuration anyway. Please check the order of declared elements against the schema.
2021-12-26 18:39:04,250 WARN [config.XMLConfiguration] - ********************************************************************************
2021-12-26 18:39:04,282 INFO [config.XMLConfiguration] - Initializing GridSets from gwc
2021-12-26 18:39:04,297 INFO [config.XMLConfiguration] - Initializing layers from gwc
2021-12-26 18:39:04,329 INFO [gwc.layer] - Initializing GWC configuration based on GeoServer's Catalog
2021-12-26 18:39:04,329 INFO [gwc.layer] - GeoServer TileLayer store base directory is: gwc-layers
2021-12-26 18:39:04,329 INFO [gwc.layer] - Loading tile layers from gwc-layers
2021-12-26 18:39:04,360 INFO [gwc.layer] - Loaded 29 tile layers in 27.81 ms
2021-12-26 18:39:04,360 INFO [storage.BlobStoreAggregator] - BlobStoreConfiguration gwc contained no blob store infos.
2021-12-26 18:39:04,360 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:39:04,360 INFO [storage.DefaultStorageFinder] - *** Found Java environment variable GEOSERVER_DATA_DIR set to C:\ProgramData\GeoServer, using it as the default prefix. ***
2021-12-26 18:39:04,360 INFO [storage.DefaultStorageFinder] - ***************************************************************************************************************************
2021-12-26 18:39:04,408 INFO [gwc.config] - Initializing GeoServer specific GWC configuration from gwc-gs.xml
2021-12-26 18:39:04,454 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:39:04,470 INFO [config.GeoserverXMLResourceProvider] - Will look for 'geowebcache-diskquota-jdbc.xml' in directory 'C:\ProgramData\GeoServer\gwc'.
2021-12-26 18:39:04,470 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:39:04,470 INFO [diskquota.ConfigLoader] - DiskQuota configuration is not readable: gwc/geowebcache-diskquota.xml
2021-12-26 18:39:04,470 INFO [diskquota.DiskQuotaMonitor] - Setting up disk quota periodic enforcement task
2021-12-26 18:39:04,470 INFO [diskquota.DiskQuotaMonitor] - 0 layers configured with their own quotas. 
2021-12-26 18:39:04,470 INFO [diskquota.DiskQuotaMonitor] - 29 layers attached to global quota 500,0 MB
2021-12-26 18:39:04,502 INFO [diskquota.DiskQuotaMonitor] - Disk quota periodic enforcement task set up every 10 SECONDS
2021-12-26 18:39:04,627 INFO [geowebcache.GeoWebCacheDispatcher] - Invoked setServletPrefix(gwc)
2021-12-26 18:39:04,643 INFO [georss.GeoRSSPoller] - Initializing GeoRSS poller in a background job...
2021-12-26 18:39:04,643 INFO [georss.GeoRSSPoller] - No enabled GeoRSS feeds found, poller will not run.
2021-12-26 18:39:04,721 INFO [wms.WMSService] - Will NOT recombine tiles for non-tiling clients.
2021-12-26 18:39:04,721 INFO [wms.WMSService] - Will proxy requests to backend that are not getmap or getcapabilities.
2021-12-26 18:39:06,135 INFO [geoserver.config] - Initiated CatalogTimeStampUpdater
2021-12-26 18:39:06,450 WARN [gce.imagemosaic] - Unable to set ordering between tiff readers spi
2021-12-26 18:39:07,811 WARN [support.XmlWebApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
2021-12-26 18:39:07,812 INFO [georss.GeoRSSPoller] - destroy() invoked
2021-12-26 18:39:07,813 INFO [geowebcache.GeoWebCacheDispatcher] - GeoWebCacheDispatcher.destroy() was invoked, shutting down.
2021-12-26 18:39:07,814 INFO [diskquota.DiskQuotaMonitor] - Disk quota monitor shutting down...
2021-12-26 18:39:07,814 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota usage monitor...
2021-12-26 18:39:07,814 INFO [diskquota.QuotaUpdatesMonitor] - Shutting down quota usage monitor...
2021-12-26 18:39:07,817 INFO [diskquota.DiskQuotaMonitor] - Shutting down quota statistics gathering monitor...
2021-12-26 18:39:07,817 INFO [diskquota.QueuedQuotaUpdatesConsumer] - Shutting down quota update background task due to InterruptedException
2021-12-26 18:39:07,818 INFO [diskquota.QueuedUsageStatsConsumer] - Shutting down quota update background task due to interrupted exception
2021-12-26 18:39:07,818 INFO [seed.SeederThreadPoolExecutor] - Initiating shut down for running and pending seed tasks...
2021-12-26 18:39:07,818 INFO [seed.SeederThreadPoolExecutor] - Seeder thread pool executor shut down complete.
2021-12-26 18:39:07,819 INFO [storage.DefaultStorageBroker] - Destroying StorageBroker
2021-12-26 18:39:07,825 WARN [support.DisposableBeanAdapter] - Destroy method 'destroy' on bean with name 'gwcMemoryBlobStore' threw an exception: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@109f95b1 rejected from java.util.concurrent.ThreadPoolExecutor@4d20cbb5[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
2021-12-26 18:39:07,827 WARN [support.DisposableBeanAdapter] - Invocation of destroy method failed on bean with name 'geoServerLoader': org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'geoWebCacheExtensions': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
2021-12-26 18:39:07,834 ERROR [context.ContextLoader] - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'legendSample' defined in URL [jar:file:/C:/GeoServer/webapps/geoserver/WEB-INF/lib/gs-wms-2.20.1.jar!/applicationContext.xml]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:304)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:285)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:554)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:514)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:319)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:866)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:401)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:292)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:103)
	at org.geoserver.platform.GeoServerContextLoaderListener.contextInitialized(GeoServerContextLoaderListener.java:22)
	at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:1068)
	at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:572)
	at org.eclipse.jetty.server.handler.ContextHandler.contextInitialized(ContextHandler.java:997)
	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:746)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:379)
	at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1457)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1422)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:911)
	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:288)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:524)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:46)
	at org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)
	at org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:517)
	at org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:157)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:173)
	at org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:427)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:66)
	at org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:785)
	at org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:754)
	at org.eclipse.jetty.util.Scanner.scan(Scanner.java:641)
	at org.eclipse.jetty.util.Scanner.doStart(Scanner.java:540)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:146)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:605)
	at org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:252)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169)
	at org.eclipse.jetty.server.Server.start(Server.java:423)
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:97)
	at org.eclipse.jetty.server.Server.doStart(Server.java:387)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73)
	at org.eclipse.jetty.xml.XmlConfiguration.lambda$main$3(XmlConfiguration.java:1907)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1857)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.jetty.start.Main.invokeMain(Main.java:218)
	at org.eclipse.jetty.start.Main.start(Main.java:491)
	at org.eclipse.jetty.start.Main.main(Main.java:77)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.geoserver.wms.capabilities.LegendSampleImpl]: Constructor threw exception; nested exception is java.lang.reflect.UndeclaredThrowableException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:187)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:300)
	... 60 more
Caused by: java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.$Proxy23.getStyles(Unknown Source)
	at org.geoserver.catalog.impl.CatalogImpl.getStyles(CatalogImpl.java:1597)
	at org.geoserver.security.SecureCatalogImpl.getStyles(SecureCatalogImpl.java:1439)
	at org.geoserver.catalog.impl.AbstractFilteredCatalog.getStyles(AbstractFilteredCatalog.java:746)
	at org.geoserver.catalog.impl.AbstractCatalogDecorator.getStyles(AbstractCatalogDecorator.java:618)
	at org.geoserver.catalog.impl.LocalWorkspaceCatalog.getStyles(LocalWorkspaceCatalog.java:76)
	at org.geoserver.wms.capabilities.LegendSampleImpl.clean(LegendSampleImpl.java:77)
	at org.geoserver.wms.capabilities.LegendSampleImpl.<init>(LegendSampleImpl.java:71)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:175)
	... 62 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.geoserver.catalog.LockingCatalogFacade.invoke(LockingCatalogFacade.java:36)
	... 75 more
Caused by: java.lang.NullPointerException
	at com.sun.proxy.$Proxy21.isIsolated(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.canSeeWorkspace(IsolatedCatalogFacade.java:650)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.enforceStyleIsolation(IsolatedCatalogFacade.java:612)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.lambda$filterIsolated$0(IsolatedCatalogFacade.java:680)
	at java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(Unknown Source)
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)
	at java.util.stream.ReferencePipeline.collect(Unknown Source)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.filterIsolated(IsolatedCatalogFacade.java:681)
	at org.geoserver.catalog.impl.IsolatedCatalogFacade.getStyles(IsolatedCatalogFacade.java:460)
	... 80 more
